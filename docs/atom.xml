<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[agileworkshop]]></title>
  <link href="http://www.agileworkshop.cn/atom.xml" rel="self"/>
  <link href="http://www.agileworkshop.cn/"/>
  <updated>2023-03-17T10:57:39+08:00</updated>
  <id>http://www.agileworkshop.cn/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im">MWeb</generator>

  
  <entry>
    <title type="html"><![CDATA[迭代评审会]]></title>
    <link href="http://www.agileworkshop.cn/16616160789048.html"/>
    <updated>2022-08-28T00:01:18+08:00</updated>
    <id>http://www.agileworkshop.cn/16616160789048.html</id>
    <content type="html"><![CDATA[
<h2><a id="%E4%BB%80%E4%B9%88%E6%98%AF%E8%AF%84%E5%AE%A1%E4%BC%9A" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>什么是评审会</h2>
<p>冲刺评审会是团队向客户、用户、核心干系人展示冲刺成果，听取意见的重要仪式，也是建立敏捷团队与客户信任关系的重要手段。</p>
<p>在冲刺结束时候，Scrum团队一般会邀请产品的客户、赞助商、高管等核心干系人一起参加评审会，向他们展示冲刺成果。在会议期间，产品负责人根据用户故事中定义的验收标准（AC）一起评审交付的故事，选择接受或拒绝已完成的用户故事。同时可以提出自己的意见与建议。</p>
<p>产品负责人和ScrumMaster会记录大家的意见以作为规划后续冲刺的参考。那么如何组织冲刺评审会呢？</p>
<h2><a id="%E5%A6%82%E4%BD%95%E7%BB%84%E7%BB%87" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>如何组织</h2>
<h3><a id="%E5%8F%82%E4%BC%9A%E4%BA%BA" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>参会人</h3>
<p>一般评审会会邀请 开发团队、Scrum Master和产品负责人、客户、用户代表和其它有兴趣的利益干系人参加；对于有些面向C端客户的产品团队，可以公开召开评审会，任何有兴趣的人都可以来参加。</p>
<h3><a id="%E5%8F%AC%E5%BC%80%E6%97%B6%E9%97%B4" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>召开时间</h3>
<p>评审会一般在冲刺最后一天召开，对于一个标准的5-9人的敏捷团队，一次评审会大概1-2小时时间。</p>
<h3><a id="%E5%BC%95%E5%AF%BC%E6%B5%81%E7%A8%8B" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>引导流程</h3>
<ol>
<li>负责演示的同学会前完成演示覆盖范围确认，只需要演示那些已经完成的故事即可。</li>
<li>会议开始后，由演示负责人介绍本冲刺的目标及完成情况。</li>
<li>演示负责人按照场景开始演示操作，边演示边对完成的故事情况进行说明。、</li>
<li>演示负责人说明本冲刺完成的非功能性需求情况，如性能优化、压测等。</li>
<li>演示过程Scrum Master记录PO和其它干系人提出的问题和建议。</li>
</ol>
<h3><a id="%E4%BC%9A%E8%AE%AE%E8%BE%93%E5%87%BA" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>会议输出</h3>
<ol>
<li>评审意见记录信息</li>
</ol>
<h2><a id="%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>注意事项</h2>
<ol>
<li>冲刺评审会只演示可以交付客户的代码，部分完成的代码不需要演示。</li>
<li>不要花费时间额外准备幻灯片，评审会不应成为团队的负担。</li>
<li>来自PO和客户的表扬会极大提高团队士气，ScrumMaster应该善用这个机会。</li>
<li>演示负责人一般可以由QA或者BA来承担。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[迭代回顾会]]></title>
    <link href="http://www.agileworkshop.cn/16616160532090.html"/>
    <updated>2022-08-28T00:00:53+08:00</updated>
    <id>http://www.agileworkshop.cn/16616160532090.html</id>
    <content type="html"><![CDATA[
<h2><a id="%E4%BB%80%E4%B9%88%E6%98%AF%E5%9B%9E%E9%A1%BE%E4%BC%9A" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>什么是回顾会</h2>
<p><img src="http://s.pyrlong.com/ob/%E5%9B%BE%E7%89%871.png" alt="" /><br />
回顾会英文叫Retrospective，在scrum的5个仪式中回顾会是价值最大、与传统管理方法相比最显著的特点。是支撑Scrum透明、检视、调整的最主要仪式。在这个活动中，团队一起检查冲刺过程数据，回顾过程中任何影响产品实现方式的事项，包括过程、实践、沟通、环境、工件、工具等，基于回顾的内容进行讨论，并制定出后期的行动项。回顾会是Scrum提供的有助于持续改进的重要活动。</p>
<h2><a id="%E5%9B%9E%E9%A1%BE%E7%9A%84%E7%9B%AE%E7%9A%84" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>回顾的目的</h2>
<p>1.做到持续改进</p>
<p>2.改进团队⼯作流程</p>
<p>3.核查⼯具的使⽤是否到位</p>
<p>4.找出潜在问题并进⾏改进</p>
<p>5.总结团队表现较好的⼯作体现</p>
<p>6.对之前的⼯作进⾏总结，制定改进计划。</p>
<p>回顾会除了是一项促进团队持续改进的活动之外，还是一个增进团队感情进行团队建设的好机会，回顾会经常可以跟团建活动组合到一起开展，往往能够对团队的长期健康度带来非常大的好处。</p>
<h2><a id="%E5%A6%82%E4%BD%95%E7%BB%84%E7%BB%87%E4%B8%8E%E5%BC%95%E5%AF%BC" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>如何组织与引导</h2>
<h3><a id="%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E5%8F%AC%E5%BC%80" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>什么时候召开</h3>
<p>一般建议回顾会在冲刺最后一天召开，最好是开完评审会后，一般用时1-2小时。</p>
<h3><a id="%E4%BB%80%E4%B9%88%E4%BA%BA%E5%8F%82%E5%8A%A0" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>什么人参加</h3>
<p>冲刺回顾需要Scrum团队全体参加，包括开发团队的所有成员、Scrum Master，产品负责人可以视情况看是否邀请其参加。</p>
<h3><a id="%E4%BC%9A%E8%AE%AE%E7%BB%93%E6%9E%84" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>会议结构</h3>
<p><img src="http://s.pyrlong.com/ob/20220408223541.png" alt="" /></p>
<h3><a id="%E4%B8%BB%E6%8C%81%E4%BA%BA%E8%81%8C%E8%B4%A3" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>主持人职责</h3>
<p>会议主持⼈应对会议议程进行有效的引导和控制，防止会议脱离目标。</p>
<p>1.准备会议数据、更新上次回顾⾏动项状态。</p>
<p>2.预订并布置会议室，准备会议耗材（如便签、笔、零⻝、饮料等）。</p>
<p>3.发起会邀，确保会议按时开始，并按照会议议程进⾏；</p>
<p>4.把控会议时间和进度，避免会议的拖沓和冗⻓，并要按时结束；</p>
<p>5.营造活跃、放松的会议⽓氛，确保开放平等的会议环境，给予参与者均等的发⾔机会并引导⼤家积极发⾔或献计献策。</p>
<p>6.保障与会者相互尊重彼此所发表的意⻅，并保护与会⼈员不受⼈身攻击。</p>
<p>7.控制会议秩序，避免过度争吵或题外话，如发现跑题，应⽴即予以制⽌。</p>
<p>8.对讨论的结论、⾏动项进⾏汇总，分发。</p>
<h3><a id="%E5%B8%B8%E7%94%A8%E5%9B%9E%E9%A1%BE%E6%96%B9%E6%A1%88" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>常用回顾方案</h3>
<h4><a id="%E7%BB%8F%E5%85%B8%E6%96%B9%E6%B3%95" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>经典方法</h4>
<p><img src="http://s.pyrlong.com/ob/20220408223658.png" alt="" /></p>
<p>回顾会是一个形式比较灵活的活动，可以有多种多样的回顾方式，下面是一种最常用的回顾方式，与会人分别回答如下三个问题，写到便签纸上，然后分别分享。</p>
<p>1.这个冲刺那些地方做的好，需要继续发扬？<br />
2.这个冲刺那些地方做的不好，今后要避免？<br />
3.我们要开始做什么或改进什么？</p>
<h4><a id="%E6%B5%B7%E6%98%9F%E6%B3%95" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>海星法</h4>
<p><img src="http://s.pyrlong.com/ob/20220408223729.png" alt="" /></p>
<h4><a id="%E5%BF%83%E6%83%85%E6%9B%B2%E7%BA%BF" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>心情曲线</h4>
<p><img src="http://s.pyrlong.com/ob/20220408223928.png" alt="" /></p>
<p>迭代⼼情曲线的横轴是时间轴，表示「迭代」的时间跨度；纵轴是情绪轴，上⾯的象限属于积极情绪，下⾯的象限属于消极情绪。</p>
<p>成员根据「迭代」的时间将⾃⼰的⼼情变化画成⼀条曲线，最后⽤⼀个词语来评价⾃⼰在整个迭代中的情绪。⼼情曲线的呈现结果可能是「正向」的，也可能是「负向」的，当「负向」曲线的成员居多时，我们要进⼀步了解是什么原因导致，并在后续的迭代中规避。</p>
<h4><a id="%E7%94%A8%E6%88%B7%E6%95%85%E4%BA%8B%E5%88%86%E6%9E%90" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>用户故事分析</h4>
<p><img src="http://s.pyrlong.com/ob/20220408224211.png" alt="" /></p>
<p>回顾上个冲刺做过的每⼀个⽤户故事，从需求价值、需求质量、交付质量、完成过程是否顺利等视⻆进⾏分类，识别遇到了哪些阻碍，进⾏优先级判断。对可能还会频繁出现的阻碍进⾏根因分析，确定改进⾏动项。</p>
<p><em>也可以将此⽅法⽤于对运维⽀持，程序漏洞或任何组合团队完成的⼯作进⾏分析。</em></p>
<h4><a id="%E5%B8%86%E8%88%B9%E6%B3%95" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>帆船法</h4>
<p><img src="http://s.pyrlong.com/ob/20220408224050.png" alt="" /></p>
<p>船 ：代表项⽬团队</p>
<p>岛. 屿：代表要实现的⽬标</p>
<p>太 阳：代表过去做得好的地⽅，未来可以继续坚持</p>
<p>⻛和云：代表团队的优势</p>
<p>锚. 点：代表过去做的不好的地⽅，未来需要改进</p>
<p>珊. 瑚：代表已识别的⻛险，对未来会产⽣阻碍</p>
<p><strong>引导步骤：</strong></p>
<p>第⼀步：⼤量收集真实情况的反馈数据，这些数据分别位于各个代表不同意思的图形中。然后对⻬⽬标，描绘达成⽬标后的理想状态。</p>
<p>第⼆步：列举阻碍我们达成⽬标的问题和⻛险，划定优先级识别最需要解决的⻛险和问题。</p>
<p>第三步：列举有哪些实践可以帮助我们克服识别的⻛险和问题。</p>
<p>第四步：选择要做的改进、确定完成标准、反馈时间、跟进⼈。</p>
<h2><a id="%E5%B8%B8%E8%A7%81%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>常见注意事项</h2>
<h3><a id="%E8%A1%8C%E5%8A%A8%E9%A1%B9%E8%A6%81%E6%B1%82smart%E5%8E%9F%E5%88%99" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>行动项要求-SMART原则</h3>
<p><img src="http://s.pyrlong.com/ob/20220408224332.png" alt="" /></p>
<h3><a id="%E5%88%B6%E9%80%A0%E4%BB%AA%E5%BC%8F%E6%84%9F%EF%BC%88%E5%AE%A3%E8%AA%93%E3%80%81%E6%9A%96%E5%9C%BA%E6%B8%B8%E6%88%8F%EF%BC%89" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>制造仪式感 （宣誓、暖场游戏）</h3>
<p>在回顾会开始主持人可以带领大家做一个暖场游戏、回顾敏捷宣言、回顾指导原则等，通过仪式感让大家尽可进入状态。</p>
<blockquote>
<p><strong>最高指导原则</strong></p>
<p>无论我们发现了什么，考虑到当时的已知情况、个人的技术水平和能力、可用的资源，以及手上的状况，我们理解并坚信：每个人对自己的工作都已全力以赴。</p>
</blockquote>
<h3><a id="%E5%9B%9E%E9%A1%BE%E5%BE%85%E5%8A%9E%E9%A1%B9" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>回顾待办项</h3>
<p>一般情况下在回顾开始可以设置一个大家对之前回顾的待办项完成情况的打分或者评价环节，可以发现之前问题解决进展、遇到的困难，更利于推进待办项的落地和执行。</p>
<h3><a id="%E7%A1%AE%E4%BF%9D%E5%9B%9E%E9%A1%BE%E7%8E%AF%E5%A2%83%E5%AE%89%E5%85%A8" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>确保回顾环境安全</h3>
<p>为了确保大家在回顾会上能畅所欲言的发言，可以在开始设置一个安全评分环节，让大家对现场的环境进行打分，1-5分，分数越高代表越安全，如果分数过低 则主持人需要找到影响大家发言的人，将其请出会议室，然后再进行打分，直到大家觉得安全了。</p>
<h3><a id="%E8%AE%BE%E7%BD%AE%E6%84%9F%E8%B0%A2%E7%8E%AF%E8%8A%82" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>设置感谢环节</h3>
<p>有时候设置一个感谢环节可以让团队氛围更融洽，更能体现团队的凝聚力和向心力，让每个小伙伴感受到自己的付出是有价值的，能得到团队的认可的。感谢环节可以通过写小卡片、送小星星、积分之类的形式，可以对获得感谢最多的人有一些小奖励以增加趣味性。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[认识极限编程]]></title>
    <link href="http://www.agileworkshop.cn/16616167353639.html"/>
    <updated>2022-08-28T00:12:15+08:00</updated>
    <id>http://www.agileworkshop.cn/16616167353639.html</id>
    <content type="html"><![CDATA[
<p>在软件项目中，流程与技术对项目结果只有次要影响，首要影响是人。如果想要项目取得成功，我们就必须组建起具有合作精神的自组织的团队，而极限编程便是众多实现这个目标的可行方法之一，极限编程方法论可以说是敏捷联盟中最鲜艳的一面旗帜.</p>
<p>极限编程（ExtremeProgramming）是所有敏捷实践中最完整的一个实践，其它敏捷实践都可以在极限编程实践中找到对应的方法和思想，甚至可以认为其它实践大多数只是极限编程的一个子集。因此如果你想了解敏捷的真谛，没有比学习实践编程更好的方法了。极限编程是敏捷最好的代表，最最代表敏捷本质的核心原型。		 —Robert C Martin 《Clean Agile》</p>
<blockquote>
<p>SCRUM本身主要是一套管理业务与团队沟通协作的实践方法，它与XP最大的区别是他不涉及任何技术实践的内容。SCRUM更多的只是一套沟通协作的框架，SCRUM作者在接受采访时也建议大家在实践SCRUM时需要搭配相应的技术实践才能取得比较好的效果。</p>
</blockquote>
<h2><a id="%E6%9E%81%E9%99%90%E7%BC%96%E7%A8%8B" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>极限编程</h2>
<p>Kent Beck是极限编程之父，他与Ward Cunningham在20世纪80年代中期一起在美国Tektronix工作，探索并尝试了很多想法，正式以这些经验为基础，后来Kent Beck实践并提出了极限编程。2000年Kent Beck发表了极限编程领域的里程碑著作《解析极限编程 拥抱变化》，极限编程被正式提出。</p>
<p>极限编程可以看做是一组方法论，一组用来确保项目成功的规则，适合模糊或者快速变化的需求，适用于任何规模的团队；《解析极限编程 拥抱变化》一书中对极限编程的解释是：</p>
<blockquote>
<p>它是一种基于沟通、反馈、简约、勇气和尊重的价值观的开发哲学，包括一系列用于辅助实践的原则和一套在实践中被证明有用的实践。</p>
</blockquote>
<p><strong>极限（Extreme)</strong> — 竭尽全力做到极致，并勇于承担后果</p>
<p><strong>编程（Programming)</strong> — 专注于编程技术、清晰沟通和团队协作的精彩实践</p>
<h2><a id="%E7%94%9F%E5%91%BD%E4%B9%8B%E7%8E%AF" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>生命之环</h2>
<p>与很多敏捷实践一样，极限编程方法也是由一组价值观原则和实践构成的方法论体系，极限编程提倡沟通、反馈、简单、勇气、尊重的价值观，他提倡可持续的开发速度、自动化测试、有效沟通、共享工作空间、现场客户代表等实践方法。罗恩 杰弗里斯（Ron Jeffries）绘制了一张用于描述极限编程实践的圆环图，被极限编程实践者亲切的称为生命之环（Circle of life），如下图：</p>
<p><img src="http://s.pyrlong.com//f20/%E7%B4%A0%E6%9D%90.001.jpeg" alt="素材.001" /></p>
<p>如图所示，极限编程<strong>是敏捷实践里唯一一个覆盖软件研发全生命周期的敏捷实践框架</strong>。总体分三层，从外到内依次代表了业务协作、团队实践、开发实践，这是一个由易到难的实践过程。</p>
<p><strong>业务协作：</strong> 业务实践为软件开发团队如何与业务沟通、如何管理项目提供了核心框架，在某种意义上他很像是Scrum的精简描述，Scrum可以看做是他的完善和丰富。</p>
<p><strong>团队实践：</strong> 规定了开发团队内部进行沟通和协作的管理框架和原则。</p>
<p><strong>开发实践：</strong> 定义了一组编程实践方法与原则，用以指导和约束程序员，确保以最高的技术质量交付软件产品。</p>
<h3><a id="%E4%B8%9A%E5%8A%A1%E5%AE%9E%E8%B7%B5" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>业务实践</h3>
<p>业务实践为软件开发团队如何与业务沟通、如何管理项目提供了核心框架。在某种意义上他很像是Scrum的精简描述，Scrum可以看做是他的完善和丰富。</p>
<h4><a id="%E8%AE%A1%E5%88%92%E6%B8%B8%E6%88%8Fplanning-game" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>计划游戏 Planning Game</h4>
<p><strong>计划游戏过程和Scrum的计划会过程很像</strong>，这个实践是整个业务实践圈的核心，它告诉我们如何将项目进行分解，如何进行估算、如何排列优先级。在这个过程中“客户负责业务决策，开发团队负责技术决策”：系统的范围**、下一次迭代的发布时间、用户故事的优先级应该由客户决定**；而每个用户故事所需的开发时间、技术选择及实现成本、如何组建团队、每个用户故事的风险，以及具体的开发顺序应该由开发团队决定。</p>
<h4><a id="%E9%A2%91%E7%B9%81%E5%8F%91%E5%B8%83small-release" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>频繁发布 Small Release</h4>
<p>极限编程提倡团队在确保每个版本有足够的商业价值的基础上让每一次发布的版本尽可能小、尽可能频繁的发布。小规模频繁发布可以使集成更频繁，客户可获得的中间结果也更频繁，团队能获取到的反馈也就更频繁，客户就能够更频繁的了解项目的进展，提出更多的意见，团队就可以在下一次迭代中计划中考虑进去，并且在新的发布得到响应，提高客户与团队之间的互信，实现更高的客户满意度。</p>
<h4><a id="%E5%AE%8C%E6%95%B4%E5%9B%A2%E9%98%9Fwhole-team" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>完整团队 Whole Team</h4>
<p>完整团队又称为现场客户（On-Site Customer）。负责项目的团队应该由包括客户在内的所有角色共同组成：包括客户代表、产品、测试、开发等，这个实践的目标是最小化这些关键角色之间的物理距离，理想情况下，大家应该坐到一个房间里，让大家可以迅速交流，没有繁文缛节，从问题提出到得到解决只需要几分钟，大家工作目的只有一个，尽早交付可以工作的软件。很多团队光是尝试让大家坐到一起就能看到非常明显的效果。</p>
<h4><a id="%E5%AE%A2%E6%88%B7%E9%AA%8C%E6%94%B6%E6%B5%8B%E8%AF%95customer-testsacceptance-tests" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>客户验收测试 Customer Tests/Acceptance Tests</h4>
<p>这个实践也有人直接称为验收测试（Acceptance Tests），但它们所表达的意思是一样的，要从客户视角对功能进行验收，让用户为特性、故事、任务提供“完成”定义，向团队展示明确而统一的完成标准。为了保证开发出来的产品与客户的预期是一致的，XP认为最好的方法就是将客户请到开发现场与团队一起工作，应该时刻保证客户负责业务决策，开发团队负责技术决策。</p>
<h3><a id="%E5%9B%A2%E9%98%9F%E5%AE%9E%E8%B7%B5" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>团队实践</h3>
<p>生命之环中间圈是面向团队的实践，这些实践提供了开发团队内部沟通和协作的基本框架和原则。</p>
<h4><a id="%E7%A8%B3%E5%AE%9A%E7%9A%84%E5%BC%80%E5%8F%91%E8%8A%82%E5%A5%8Fsustainable-pace" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>稳定的开发节奏 Sustainable Pace</h4>
<p>让开发团队以稳定而可持续的节奏进行工作，避免时快时慢，过早的消耗精力。</p>
<h4><a id="%E4%BB%A3%E7%A0%81%E9%9B%86%E4%BD%93%E6%89%80%E6%9C%89collective-ownership" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>代码集体所有 Collective Ownership</h4>
<p>确保团队不会将项目分割成一堆知识孤岛。</p>
<h4><a id="%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90continuous-integration" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>持续集成 Continuous Integration</h4>
<p>团队需要专注于频繁地进行编译、集成以获取反馈信息，随时了解项目的进展。</p>
<h4><a id="%E9%9A%90%E5%96%BBmetaphor" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>隐喻 Metaphor</h4>
<p>这个实践提倡创造并传播关于待开发系统的词汇和语言，最好能通过比喻方式找到形象的让大家更容易接受和记住的词汇，以便团队和业务部门之间沟通时使用。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[认识Scrum]]></title>
    <link href="http://www.agileworkshop.cn/16616156981885.html"/>
    <updated>2022-08-27T23:54:58+08:00</updated>
    <id>http://www.agileworkshop.cn/16616156981885.html</id>
    <content type="html"><![CDATA[
<p>Scrum指南中定义Scrum是一个“轻量级框架”，目的是帮助个人、团队、组织通过建立解决复杂问题的自适应机制来创造价值（Scrum指南 2020）。</p>
<p>我们可以看到Scrum给自己的定位是一个<strong>轻量框架</strong>，目的的解决<strong>复杂问题</strong>，手段是通过建立“<strong>自适应机制</strong>”。</p>
<ul>
<li><strong>轻量级框架</strong></li>
</ul>
<p>“框架” 的特点是它本身没有指定太多细节，必须由使用框架的人来进行补充，因此它并不是一个开箱即用的完整方法论，它提供的类似于一套未装修的写字楼，需要使用者根据自己的实际情况完成装修：比如Scrum框架中使用产品代表列表来管理需求，那产品待办列表里放的是什么呢？需要使用者自己来选择，大多数会选择使用用户故事来填充，也有团队会选择用需求条目来填充。再比如Scrum框架并未对研发过程采用的实践进行说明，那就需要实践者自己选择采用哪些研发实践（比如”极限编程“).Scrum这个特性确保了它的灵活性，使用者可以从过去五十多年的优秀实践中选择最适合的那些，不同人、不同公司、不同行业可以演化出最适合自己的方法论。同时也让它具有了另一个特点<strong>知易行难</strong>，Scrum看起来很容易，但是真做到需要耗费大量的精力，就像学习国际象棋一样，您可以通过阅读国际象棋的官方规则手册，很快学会开始下棋，但是离成为一个国际象棋大师却有很长的路要走。</p>
<ul>
<li><strong>复杂问题</strong></li>
</ul>
<p>Scrum的目标是提供针对复杂问题的解决方案，这并不是说对于简单问题Scrum没有效果，而是说在解决复杂问题时会体现出更多的价值。Scrum的这个特点往往也成为项目团队选择是否采用Scrum的一个主要因素。通常我们在分析软件项目时往往从业务复杂度和技术复杂度两个维度进行分析，这个分析思路来自著名的Stacey矩阵，通过判断项目处于Stacey矩阵中的位置来选择适用的项目管理过程。<br />
<img src="media/16616156981885/16616981146342.jpg" alt="" /></p>
<ul>
<li><strong>自适应机制</strong></li>
</ul>
<p>Scrum主张通过建立自适应的协作机制来调动团队的主动性，充分发挥团队每个人的专长，以此推动问题最终解决，Scrum基于以下理念：对于新的复杂产品的开发，只有为小型且自组织的团队指定目标而不是特定任务，才能达到最佳效果。团队可以自由决定实现这些目标的最佳方法。 Scrum还定义了有时间限制的迭代开发周期，通过小周期快速迭代实现团队的自我进化，一个理想的Scrum过程如下：</p>
<blockquote>
<ol>
<li>产品负责人将复杂问题的工作安排到产品待办列表中。</li>
<li>Scrum 团队在 Sprint 期间将选择的工作转化为价值增量。</li>
<li>Scrum 团队及其利益相关者检查结果并为下一个 Sprint 进行调整。</li>
<li>重复</li>
</ol>
</blockquote>
<p>Scrum一词来源于英式橄榄球比赛，原意为“密集争球”，寓指整个团队攒足力量，为了一个共同的目标，一起向前发起冲刺。Scrum的发明者认为这与开发人员以迭代、增量的方式集中全力交付产品的过程非常相似，所以将这种开发方法命名为Scrum。</p>
<h2><a id="scrum%E4%B8%89%E5%A4%A7%E6%94%AF%E6%9F%B1" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>SCRUM三大支柱</h2>
<p>Scrum 的三大支柱支撑起每个经验性过程控制的实现: 透明性、检验和适应。</p>
<p>1.透明性（Transparency）</p>
<p>透明度是指，在软件开发过程的各个环节保持高度的可见性，影响交付成果的各个方面对于参与交付的所有人、管理生产结果的人保持透明。管理生产成果的人不仅要能够看到过程的这些方面，而且必须理解他们看到的内容。也就是说，当某个人在检验一个过程，并确信某一个任务已经完成时，这个完成必须等同于他们对完成的定义。</p>
<p>2.检验（Inspection）</p>
<p>开发过程中的各方面必须做到足够频繁地检验，确保能够及时发现过程中的重大偏差。在确定检验频率时，需要考虑到检验会引起所有过程发生变化。当规定的检验频率超出了过程检验所能容许的程度，那么就会出现问题。幸运的是，软件开发并不会出现这种情况。另一个因素就是检验工作成果人员的技能水平和积极性。</p>
<p>3.适应（Adaptation）</p>
<p>如果检验人员检验的时候发现过程中的一个或多个方面不满足验收标准，并且最终产品是不合格的，那么便需要对过程或是材料进行调整。调整工作必须尽快实施，以减少进一步的偏差。</p>
<h2><a id="scrum%E7%9A%84%E7%BB%84%E6%88%90" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>SCRUM的组成</h2>
<p><img src="http://s.pyrlong.com/ob/%E5%9B%BE%E7%89%871.png" alt="" /><br />
Scrum将整个开发周期划分为若干小的迭代周期，每个小的迭代周期称为Sprint，每个Sprint的长度为2到4周。</p>
<p>在Scrum中，使用产品待办列表（Product Backlog）来管理产品或项目的需求，产品待办列表是一个按照商业价值排序的需求列表，实践中经常使用用户故事作为列表的条目。</p>
<p>Scrum的开发团队总是先开发的是对客户具有较高价值的需求。在每个Sprint中，Scrum开发团队从产品Backlog中挑选最有价值的需求进行开发。</p>
<p>Sprint中挑选的需求经过Sprint计划会议上的分析、讨论和估算得到一个Sprint的任务列表，我们称为Sprint Backlog。在每个迭代结束时，Scrum团队将交付潜在可交付的产品增量。</p>
<p><strong>Scrum 也可以简单归纳为“3355”</strong>：</p>
<p>第一个3是指Scrum的三个角色，分别是产品负责人（Product Owner）、Scrum Master和Scrum团队；</p>
<p>第二个3是指Scrum的三个交付物，分别是产品待办列表、冲刺待办列表和迭代增量；</p>
<p>第一个5是指Scrum的五个活动，分别是Sprint、Sprint计划会议（Sprint Planning Meeting）、每日站会（Daily Scrum Meeting）、Sprint评审会议（Sprint Review Meeting）和Sprint回顾会议（Sprint Retrospective Meeting）</p>
<p>第二个5是指Scrum的五个价值观，分别是承诺、专注、开放、尊重和勇气。</p>
<blockquote>
<p>2015年以来，互联网带来的巨变使敏捷方法受到了更多开发团队的欢迎，而其中Scrum以其扩展性、门槛低、名字和术语更容易被接受等因素，逐渐成为最受欢迎的敏捷实践。如今，Scrum的影响已经远远超出软件开发领域，成为零售、军事、风险投资甚至学校里完成各种任务的创新方法，Scrum正在改变着世界。</p>
</blockquote>
<h2><a id="%E7%81%B5%E6%B4%BB%E4%BD%BF%E7%94%A8scrum" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>灵活使用Scrum</h2>
<p>自1995年首次发行至今，Scrum已被全球众多软件公司所采用。今天，它被认为是敏捷软件开发中应用最广泛的框架。针对Scrum已经出版了1000多本书，该方法也已经成功地应用于其他领域，例如：制造，营销，运营和教育。</p>
<p>随着Scrum的发展，互联网上散布着各种有关Scrum的理论和主张，这使我想起盲人摸象的故事。Jeff Sutherland认为Scrum是一个框架，其中包含了过去五十多年人们所发明的各种最佳实践，能找到最适合你的那种实践才是最关键的，Ken在接受采访时曾经说过：“不加调整地盲目应用任何技术都是有害的”。</p>
<p><em>最后我们引用《人月神话》作者弗雷德·布鲁克斯（Fred Brooks）在“ No Silver Bullet—Essence and Accidents of Software Engineering”的文章中的观点：没有任何单一的技术或过程可以带来软件开发效率的显着提高。这句话对敏捷同样适用，并不是实践了Scrum或者XP就可以解决你的所有问题，先定义清楚你面临的问题，然后去找到适合你的那些实践。</em></p>
<h2><a id="%E9%99%84scrum%E5%8F%91%E5%B1%95%E5%8F%B2" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>附-SCRUM发展史</h2>
<p>Jeff Sutherland和Ken Schwaber在90年代初构想并实践了Scrum管理过程，1995年，杰夫·萨瑟兰和施瓦布在美国计算机协会举办的一次研讨会上发表了一篇题为《Scrum开发流程》的论文，梳理了一些推荐的做法,标志着Scrum的正式发布。</p>
<ul>
<li>
<p>在2001年2月，Jeff和Ken在参与发布了敏捷软件开发宣言。并在敏捷宣言发表后不久发起成立了敏捷联盟，肯·施瓦伯（Ken Schwaber）担任第一任主席。</p>
</li>
<li>
<p>2001年，受极限编程创始人肯特·贝克（Kent Beck）的启发，肯·施瓦伯（Ken Schwaber）与迈克·比德尔（Mike Beedle）合著了第一本关于Scrum的书《Agile Software Development with Scrum》。</p>
</li>
<li>
<p>2002年，Ken Schwaber与Mike Cohn和Esther Derby共同创立了Scrum联盟，由Ken主持该组织，在随后的几年中，创建并发布了非常成功的ScrumMaster认证体系及其衍生产品。</p>
</li>
<li>
<p>2006年，Jeff Sutherland创立了自己的公司Scrum.inc，继续提供和教授Scrum认证课程。</p>
</li>
<li>
<p>Ken在2009年秋天离开了Scrum联盟，并创立了<a href="http://scrum.org/">Scrum.org</a>，主要是通过Professional Scrum系列进一步提高了Scrum的质量和有效性。</p>
</li>
<li>
<p>Jeff和Ken在2010年首次发布《Scrum指南》，并在2011年、2013年、2017年、2020年对其进行了更新，建立了全球广为认可的Scrum框架体系。</p>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[结对编程]]></title>
    <link href="http://www.agileworkshop.cn/16616166850677.html"/>
    <updated>2022-08-28T00:11:25+08:00</updated>
    <id>http://www.agileworkshop.cn/16616166850677.html</id>
    <content type="html"><![CDATA[
<p>这个是国内公司最难接受的一个实践方法，至少目前我还没见过几个会大规模应用的公司。国外公司这方面的尝试相对会多一些，长期以来的研究结果表明：结对编程的效率确实比单独编程更高。往往一开始会牺牲一些速度，但慢慢的，开发速度会逐渐加快，究其原因，主要是结对编程大打降低了沟通的成本，提供了工作的质量。</p>
<h2><a id="%E4%BB%80%E4%B9%88%E6%98%AF%E7%BB%93%E5%AF%B9%E7%BC%96%E7%A8%8B" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>什么是结对编程</h2>
<p>提起结对编程很多人第一反应是这不适合我们、这不适合我们的国情、司情等等一堆拒绝的理由，但结对编程实际上又是一个很多团队已经不同程度在用的实践，他之所以引起大量争议和误解就在于他这个名字：给人感觉好像本来一个人的活现在要两个人干了一样。另外一个原因是它的好处不是立即显而易见的，它需要在中期和长期中会获得更多回报。</p>
<blockquote>
<p>09年我作为研发经理带一个研发团队，这期间团队新来的一个研发上手比较慢，团队其他人很有意见,觉得他影响了团队交付。于是我固定每天下班后陪他1-2小时，看着他写代码，有不合理的地方马上指出来。遇到他想不明白的时候直接接过键盘来写出代码给他看，这个过程持续了近两周的时间，这个过程中这位同事取得了非常快的进步，以至于在之后直接接替了我的大部分日常开发工作。后来学习敏捷后才发现这个过程其实就是结对工作价值的具体体现，只是没有那么刻意，没有形成机制。可以想象如果把这种实践形成一种文化和习惯对团队整体能力和水平提升、知识传递带来的价值会有多大。</p>
</blockquote>
<p>结对编程实践可以看做一种代码评审方式：极限编程实践者认为既然代码评审是有意义的，那推到极致就是即时评审，这也是结对编程提出的初衷。结对过程让我们看起来更像一个团队 ，我们在一起解决问题，一起成长。结对是成员之间共享知识，避免形成知识孤岛的最佳方法。很多实践结对编程的团队报告说，结对可以显著减少错误并提高代码和设计质量。<br />
<img src="http://s.pyrlong.com/ob/fullstack-infographic-week-9-pair-programming-01-1-1.jpg" alt="" /></p>
<h2><a id="%E5%A6%82%E4%BD%95%E5%AE%9E%E8%B7%B5%EF%BC%9F" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>如何实践？</h2>
<p>结对编程推荐的实践方式是：两个人共享一台电脑 一个屏幕 一个键盘和鼠标，其中一个人作为”驾驶员“，另一个人作为”领航员“，驾驶员负责操作键盘和鼠标，领航员则眼观六路随时发现问题并提出建议。还有一种基于TDD的结对方式是一个人写测试代码 另一个人写实现代码让测试通过，这种结对方式有时被称作乒乓。</p>
<p>实际实践过程中可以很灵活，一般也没有明确的角色划分，两个人一起合作，不用事先准备，平等的共享鼠标和键盘。结对过程是非常耗费精力的，一般结对时间很短，以十几分钟或一两个小时居多 ，极少能达到一整天的情况。</p>
<p>一般建议资深程序员与初级程序员结对次数应该超过与其他资深程序员的结对次数。具备特殊技能的程序员应该经常与不具备该技能的程序员的一起结对工作。结对的目标之一是帮助团队传播和交换知识，而不是使知识集中在少数人手里。而且需要注意的是虽然叫结对编程，但是实际上并没有限制，实际操作时很多时候为了解决一个难题可能是更多的人都会参与其中。</p>
<p>现实中许多团队是由程序员自行决定是否结对。在程序员认为必要的时候结对。</p>
<h2><a id="%E7%BB%93%E5%AF%B9%E7%9A%84%E6%88%90%E6%9C%AC" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>结对的成本</h2>
<p>很多人反对结对的原因是觉得 浪费了资源，让两个人一起解决同一个问题，那岂不是要花双倍的成本了？事实上即使是两个人去解决同一个问题也不会使解决问题的工作量加倍。它确实付出了一些额外代价，研究表明采用结对编程的团队会比不采用结对编程的团队多耗费15%的成本。换句话说会需要115名程序员来完成不接对时100名程序员的工作。然而我们必须还要考虑到交叉培训对于知识交流和紧密合作的好处，这些收益不容易被量化，但可能会非常重要。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[看板系统]]></title>
    <link href="http://www.agileworkshop.cn/16616158271007.html"/>
    <updated>2022-08-27T23:57:07+08:00</updated>
    <id>http://www.agileworkshop.cn/16616158271007.html</id>
    <content type="html"><![CDATA[
<p><img src="http://s.pyrlong.com//f20/20220413143456.png" alt="" /></p>
<blockquote>
<p>第一个看板系统诞生于2004年，最早在微软的XIT软件维护团队中使用，这是一个离岸外包供应商团队，并且在第一个看板系统中就使用了电子化的跟踪工具。通过使用看板方法，该团队的生产率有了超过200%的提升，前置时间降低了90%。</p>
</blockquote>
<h2><a id="%E4%BB%80%E4%B9%88%E6%98%AF%E7%9C%8B%E6%9D%BF%E6%96%B9%E6%B3%95%EF%BC%88kanban" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>什么是看板方法（Kanban)</h2>
<p>看板方法在2006年被正式提出，是目前公认的敏捷实践之一，得到广泛的认可和使用。它的基本思想来源于高德拉特的约束理论（TOC)，首先使用价值流对软件开发生命周期的工作流程进行建模，然后建立一个可视化的跟踪系统，通过跟踪工作流过该系统时其状态的变化识别出系统瓶颈，持续优化与改进。</p>
<h3><a id="%E6%8B%89%E5%8A%A8%E7%B3%BB%E7%BB%9F%EF%BC%88pull-system%EF%BC%89" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>拉动系统（pull system）</h3>
<p>看板系统被看做是一个拉动系统（pull system）, 拉动系统的一个有趣的特性是：他们通常会通过将在制品数量限制在一定的范围内，以防止工作过载。一般情况下只有瓶颈节点的工作会处于饱和状态，其他节点则会有相应的富裕产能。</p>
<p>一般情况，看板系统使用卡片数量代表系统额定（设定）的生产能力，一张卡片代表一个工作项，该工作项通过卡片在系统内进行流转，这就形成一种信号机制。当拿到一个新卡片时开始工作，当卡片达到限定数量时就不能加入新的工作，后续工作必须在等待队列中进行等待，直到有了新的容量可用。</p>
<p>这种机制就是所谓的拉动系统（pull system) , 只有系统具备处理能力的时候才拉入新工作项，而不是基于需求将工作项推入系统中。系统使用卡片数量代表处理能力，通过设置匹配系统处理能力的阈值以避免系统出现过载现象。</p>
<h3><a id="%E7%9C%8B%E6%9D%BF%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%89%B9%E6%80%A7" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>看板系统的特性</h3>
<p>看板系统有五个核心特性</p>
<ol>
<li>可视化工作流程</li>
<li>限制进行中的工作（wip)</li>
<li>度量和管理流动</li>
<li>明确过程策略</li>
<li>使用模型来识别改进机会</li>
<li>根据延迟（机会）成本确定工作项的优先级顺序。</li>
<li>通过服务分类来优化价值</li>
<li>通过产能分配来管理风险</li>
<li>鼓励工艺和过程创新。</li>
<li>定量化管理</li>
</ol>
<h2><a id="%E7%9C%8B%E6%9D%BF%E6%96%B9%E6%B3%95%EF%BC%88kanban%E7%9A%84%E7%89%B9%E7%82%B9" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>看板方法（Kanban)的特点</h2>
<ol>
<li>通过限制在制品数量，即让团队保持高效、稳定、可持续的开发步调，又可以让所有人实现工作于生活之间的平衡。</li>
<li>看板能迅速暴露那些影响效能的问题：看板为质量和过程中出现的问题提供了可见性，使得缺陷、瓶颈等对流动与交付速率的影响变得更明显，团队所面临的挑战是如何解决这些问题以维持文档的工作流。</li>
<li>通过将改进流程、实现更好的交付质量，可以有，效缩短前置时间，提高交付的可预测性。</li>
<li>通过建立稳定的发布节奏，通过持续、稳定、高质量的交付有价值的软件可以极大的提高客户满意度。</li>
</ol>
<h2><a id="%E7%9C%8B%E6%9D%BF%E6%96%B9%E6%B3%95%E7%9A%84%E4%BC%98%E5%8A%BF" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>看板方法的优势</h2>
<h3><a id="%E4%B8%93%E6%B3%A8%E4%BA%8E%E8%B4%A8%E9%87%8F" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>专注于质量</h3>
<p>缺陷过多是软件开发过程中最大的浪费，有调查显示，不同团队的软件质量水平可能相差几十倍上百倍，笔者工作的公司一位来自IBM的测试工程师曾经和我说过，在IBM的时候测试软件过程中，每发现一个bug都会特别兴奋，而在他现在所在的团队，软件工程师把产出bug看做理所当然，没有人去思考这些bug是否应该出现，是否有办法可以少出现，为此他非常沮丧。</p>
<p>这种情况长期存在会造成团队越来越多的精力会花在线上系统的维护和缺陷修复上，能用来优化系统功能、交付价值的精力越来越少，这还不算最糟糕的，经常有系统因为存在顽固性质量问题而不得不推到重来。笔者曾经见到过一个系统不到三年时间推倒重来三次。</p>
<p>因此鼓励提高软件交付的初始质量（initial quality），会对高缺陷率团队的生产率、交付速率提升产生巨大的正向作用。获得2-4倍的交付速率提升的情况非常常见。如果是一个起点非常低的团队，通过实施专注于质量的措施带来10倍效能提升都是可能的。</p>
<p>总的来说，看板方法提倡综合应用如下措施来提升软件质量：</p>
<p>测试驱动开发（TDD）<br />
代码质量检查<br />
协作进行分析和设计<br />
熟练使用设计模式<br />
使用更为先进的开发和测试工具</p>
<h3><a id="%E5%87%8F%E5%B0%91%E8%BF%9B%E8%A1%8C%E4%B8%AD%E7%9A%84%E5%B7%A5%E4%BD%9C%EF%BC%88wip%E5%B9%B6%E9%A2%91%E7%B9%81%E4%BA%A4%E4%BB%98" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>减少进行中的工作（WIP)并频繁交付</h3>
<p>在制造业中存在一个称为 <strong>利特尔定理（Little's Law）</strong> 的理论，其基本思想是：<em>在制品数量和平均前置时间之间存在线性相关性</em>。摩托罗拉公司曾经对比过两只团队的开发数据，表结果明：前置时间的增加会直接导致质量的下降，前置时间越长质量下降越明显。</p>
<p>基于以上理论，要想提高质量的关键在于缩短前置时间，而缩短前置时间意味着可以更频繁的发布代码，从而更频繁的获得反馈，更有利于与客户、外部团队、市场营销团队或业务方建立起信任关系。这能让大家相信软件开发团队具有持续、快速交付价值的能力。而高质量的代码则会在上下游合作团队之间建立信任关系。</p>
<blockquote>
<p>社会学家将信任称之为社会资本，他们发现，信任是由事件驱动的，小而频繁的事件较之那些大的但只是偶尔发生的事件更能增加信任。以追求女孩儿为例，一个男孩儿每周都会给女朋友一个小礼物，另一个男孩隔几个月才买一个更贵的礼物，哪个人容易得到女孩儿的好感？</p>
</blockquote>
<h3><a id="%E6%A0%B9%E6%8D%AE%E4%BA%A4%E4%BB%98%E9%80%9F%E7%8E%87%E5%B9%B3%E8%A1%A1%E9%9C%80%E6%B1%82%E8%BE%93%E5%85%A5%E9%87%8F" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>根据交付速率平衡需求输入量</h3>
<p>想象团队是一座工厂，这座工厂的单位时间产能是固定的，你没法通过强加更多订单来提高他的产能。同样我们安排多少需求进入开发工作流也要基于团队的实际产能来决定。</p>
<p>在这种情况下，只有处于瓶颈的资源会处于满负荷状态，其它人会突然发现自己手头有时间了，这些时间可以用来帮助提升瓶颈出的工作效率、改造工作环境、学习新的技能和工具、改善与上下游协作的方式。随着时间的推移，一个个小的改进不断发生，突然有一天你会发现，团队已经在持续改进的路上走出了很远，进而整个团队建立起了追求改进、不断进步的氛围。</p>
<blockquote>
<p>实际上，这是违反人的直觉的，直觉上人们不喜欢有人闲着，因此很多公司会倾向于调整资源配比来平衡这个过程，以让工作流的每个环节都能处于相对高的负荷状态。这当然也会带来生产力的提高，但是相应的也会阻碍团队建立持续改进的工作习惯，长期来看对组织是有害的，因此单纯以提高资源利用率为目的的价值流优化是不可取的。</p>
</blockquote>
<h3><a id="%E8%BF%9B%E8%A1%8C%E4%BC%98%E5%85%88%E7%BA%A7%E6%8E%92%E5%BA%8F" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>进行优先级排序</h3>
<p>在敏捷社区，人们普遍已经从关注产出效率转变到关注产出价值，同样需求优先级排序也会优先考虑需求能带来的业务价值，因为交付业务价值才是产品是否成功的最终衡量标准。</p>
<p>当团队交付的节奏和可预测性建立起来以后 ，人们自然会开始关注应该先交付哪些内容了，这就涉及到对需求进行优先级排序工作。一般优先级排序是由产品负责人、业务方或市场营销部门来确定的，最好的情况是他们在决定优先级顺序时会征求技术团队的意见。</p>
<h3><a id="%E6%89%BE%E5%88%B0%E5%AF%BC%E8%87%B4%E5%8F%98%E5%8C%96%E6%88%96%E5%8F%8D%E5%A4%8D%E7%9A%84%E6%A0%B9%E6%BA%90%EF%BC%8C%E6%8F%90%E5%8D%87%E5%8F%AF%E9%A2%84%E6%B5%8B%E6%80%A7" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>找到导致变化或反复的根源，提升可预测性</h3>
<p>我们要要关注变化的可预测性，挖掘那些可能导致变化或反复的原因，将其纳入到考虑范围内。我们需要认识到需求的不确定性和变化，以及在分析、设计、编码、测试、构建、交付过程中的变化都会对交付速率及整个软件开发价值流所需的开销带来消极影响。我们可以从流程、原则、方法等方面进行改变，以便于从根源上持续降低变异性，从而提高可预测性。</p>
<h3><a id="%E6%8C%81%E7%BB%AD%E6%94%B9%E8%BF%9B" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>持续改进</h3>
<p>持续改进能力是所有软件团队和软件企业一直在追求的一个目标，卡内基梅隆大学软件工程研究所在其CMMI能力成熟度模型中，将最高级定义为优化级（optimizing），即意味着组织具备持续不断改进产品质量和效能的能力。使用看板方法则会促成更多针对工作价值流的梳理、思考与改进，有利于建立起持续改进的文化氛围。</p>
<h2><a id="%E5%AE%9E%E6%96%BD%E7%9C%8B%E6%9D%BF%E6%96%B9%E6%B3%95" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>实施看板方法</h2>
<h3><a id="%E8%AF%86%E5%88%AB%E4%BB%B7%E5%80%BC%E6%B5%81" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>识别价值流</h3>
<p>看板方法区别与Scrum等其它敏捷实践的最大特点在于其对组织现有流程的极小的侵入性，看板方法的目的是通过优化现有流程来驱动变革。开始实施看板方法的关键在于：变化越少越好，主导这个过程的人（尤其是领导层）要抵制住自己改变工作流程、角色、职责、新的实践方法的诱惑。看板方法关注的是在制品数量、与上下游业务间的接口及交互方式。因此实践的第一步是把现有的价值流图画出来。</p>
<p><img src="http://s.pyrlong.com/ob/20220412212612.png" alt="" /></p>
<p>这一步的关键是：输出的流程必须是实际使用的流程，很多组织有一个官方流程，团队实际操作的是在官方流程基础上的裁剪，梳理的时候往往下意识的按照官方流程来梳理，这种情况是需要注意避免的。否则看板方法就不能发挥其该有的价值。</p>
<h3><a id="%E7%A1%AE%E5%AE%9A%E6%8E%A7%E5%88%B6%E8%B5%B7%E7%82%B9%E5%92%8C%E7%BB%88%E7%82%B9" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>确定控制起点和终点</h3>
<p>梳理出工作流之后需要确定我们想通过看板管理的起点和终点分别在哪里？定义好和上下游合作团队、角色的接口。影响这里选择的因素主要看团队的控制范围覆盖到哪里，我们最终选择的部分应该是自己可以施加控制，如自己能主导设置在制品限额，并和上下游关联方协商确定合作与交互方式。例如，如果团队具有采用何种工程实践或软件开发方法的决策权限，可以控制产品设计设计、测试和编码获得，那么选择覆盖自己控制范围内的价值流节点就可以了。</p>
<h3><a id="%E6%A2%B3%E7%90%86%E5%B7%A5%E4%BD%9C%E9%A1%B9%E7%B1%BB%E5%9E%8B" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>梳理工作项类型</h3>
<p>一旦选定工作流的起点和终点后，接下来就需要识别有哪些工作会流经这个过程，以及流经整个价值流的时候需要遵守哪些限制。例如：缺陷应该是价值流中流动的一种工作类型，另外还可能包括 <strong>新的用户故事、新的特性、功能需求、系统部署、系统重构</strong> 等都可能作为工作项，我们需要确定那些会在我们的看板上流动的工作项，原则上看板应该体现团队的所有工作内容。</p>
<h3><a id="%E5%B7%A5%E4%BD%9C%E9%A1%B9%E5%88%86%E6%9E%90" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>工作项分析</h3>
<p>在确定了我们日常都需要交付或响应哪些工作项之后，接下来就需要去分析这些工作项的特点，理想情况是我们根据历史数据进行统计来得到，每类工作项的占比，如果没有历史数据则可以临时使用主观的定性分析来确定初步的信息，后续随着数据的收集再进行持续修正，针对每类工作项都需要回答类似问题：</p>
<blockquote>
<p>日常工作中新的功能特性占比是多少？<br />
我们一般需要多少精力放到代码重构和优化工作上？<br />
现在系统的运维报事趋势是怎么样的，我们需要投入的精力占比有多少？<br />
对于发现的不同等级的缺陷我们的修复要求是什么样的？我们需要预留多少精力？</p>
</blockquote>
<p>通常大部分工作项请求应该是相对稳定的，例如大概每1-2周都会有10-15个新的需求特性被提交过来。需求变更大部分情况下是随机提出的，但是从统计上看，基本上能稳定在每周5-7个，对于这类工作项采用相对概率最大的情况下的数字就可以了。</p>
<p>还有一种情况是某些工作项只是偶尔出现，甚至出现突然暴增的情况，比如 新系统上线后突然暴增的运维工作量、某个问题导致的突然出现的优化需求等等，对于这类工作项我们首先要识别到他们的存在，然后在设计看板系统时候确定应对此类工作的原则和方法。对这类工作项的策略是尽量降低其对团队工作节奏造成的可能冲击。</p>
<h3><a id="%E4%B8%BA%E5%B7%A5%E4%BD%9C%E9%A1%B9%E5%88%86%E9%85%8D%E4%BA%A7%E8%83%BD" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>为工作项分配产能</h3>
<p>一旦对各个工作项有了正确的理解，就可以着手解决如何在看板系统中为各个工作项分配适当的产能以满足工作需求了。下图是一个例子，它代表团队要花60%的精力应付各类变更请开发新功能求，10%的精力处理系统运维工作，剩余30%精力应对系统变更请求。每类工作项流转在自己的泳道上。<br />
<img src="http://s.pyrlong.com//f20/20220413173657.png" alt="" /></p>
<p>很多时候，不同类型工作项的占比是频繁变化的，因此对于工作项的产能分析需要持续进行检查和调整，确保其适应团队当下的情况，如经过一段时间后产品需要处理的变更请求持续下降，则就可以分出一部分产能放到其它如 新功能开发、性能优化之类更重要的工作项上去了。</p>
<h3><a id="%E5%88%B6%E4%BD%9C%E5%8D%A1%E7%89%87%E5%A2%99" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>制作卡片墙</h3>
<p>经过以上分析和规划后，我们的看板应该长什么样子基本已经确定了，接下来就需要我们把卡片墙建起来了，这会带来另外一个问题，我们是选择物理的还是电子的呢？</p>
<h4><a id="%E7%89%A9%E7%90%86%E5%8D%A1%E7%89%87%E5%A2%99" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>物理卡片墙</h4>
<p>物理卡片墙的特点是制作简单，更灵活、可视效果好，缺点是过程数据不容易被度量，需要人工记录，不利于基于价值流过程数据进行分析与优化。 物理卡片墙需要找一面大的空白墙体或者大的白板，然后用美纹纸或者油性笔按照规划绘制出看板的泳道。</p>
<p><img src="http://s.pyrlong.com//f20/20220413112217.png" alt="" /></p>
<h4><a id="%E7%94%B5%E5%AD%90%E5%8D%A1%E7%89%87%E5%A2%99" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>电子卡片墙</h4>
<p>直接使用电子卡片墙的团队也越来越多，电子卡片墙可以带来更丰富的操作体验、更及时的度量数据、更灵活的卡片组织策略，你可以为不同场景设置不同的视图。但是电子卡片墙有一个缺点就是需要一定的成本投入，电子卡片墙一般会选择通过大的电视、显示屏来实现看板信息的显示，很多公司会配置带触摸屏的电视来实现。目前有很多商业产品支持电子看板系统，如JIRA Trello Teambition 等,可以根据团队情况选择其中一种。</p>
<p><img src="http://s.pyrlong.com//f20/20220413112456.png" alt="" /></p>
<h4><a id="%E5%8D%A1%E7%89%87%E5%86%85%E5%AE%B9" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>卡片内容</h4>
<p>有了卡片墙之后我们需要决定在卡片上包括哪些信息，下面列出了一个示例卡片的结构：</p>
<p><img src="http://s.pyrlong.com//f20/20220413144834.png" alt="" /></p>
<p>除了上面这些信息之外还可以在卡片上增加更多你们觉得有必要的信息，如 记录一下卡片进入开发的时间和完成时间，对存在障碍和风险的卡片增加特殊标识，在卡片背面记录一些特殊要求等等。</p>
<h3><a id="%E8%AE%BE%E7%BD%AE%E5%9C%A8%E5%88%B6%E5%93%81%E9%99%90%E9%A2%9D" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>设置在制品限额</h3>
<p>完成泳道和卡片设计之后，我们还需要在看板上设置在制品限制（WIP), 限制的初始值可以是我们根据团队的历史产能数据进行估算的，也可以先根据主观感觉设置一个，经过一段时间磨合后该值会逐渐变得适合团队的现状。</p>
<p>大多数情况，团队很难做到一件工作毫无阻塞的流转，一些节点（瓶颈）会出现负荷过高甚至阻塞的情况，这时候可以考虑在这种节点前设置缓冲区，设置缓冲区的目的是为了让工作流动变得更平滑，确保前置时间的稳定性，这是一种充分利用瓶颈处资源的常见做法，缓冲区也需要尽量的小，过大的缓冲区会导致系统的WIP增加，前置时间变大，并且会破坏系统的平衡性。<br />
<img src="http://s.pyrlong.com//f20/20220413173831.png" alt="" /></p>
<h3><a id="%E5%9B%B4%E7%BB%95%E7%9C%8B%E6%9D%BF%E7%BB%84%E7%BB%87%E6%AF%8F%E6%97%A5%E7%AB%99%E4%BC%9A" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>围绕看板组织每日站会</h3>
<p>围绕看板 的站会应该把焦点放到促进工作项的流动上，引导者可以通过做看板走读，根据反馈更新每项工作状态，询问是否有看板未记录的额外工作。关注受阻工作项。</p>
<blockquote>
<p>注意 这里的站会和Scrum那种促进每个人去思考、去发言的方式有明显的区别，这里的站会主持人去通过看板判断当前进度和风险，关注阻碍需求流动的工作，寻求卡片负责人的反馈。</p>
</blockquote>
<h3><a id="%E4%BD%BF%E7%94%A8%E7%B4%AF%E7%A7%AF%E6%B5%81%E5%9B%BE" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>使用累积流图</h3>
<p><img src="http://s.pyrlong.com//f20/20220419155655.png" alt="" /></p>
<p>累积流图是描述处于某个给定状态的工作量所占的面积图，是常用的用来度量团队状态的图形工具，一般看板系统都会配合累积流量图使用。通过该图我们可以得到如下信息：</p>
<ol>
<li>当前看板在制品总数（需求总量）</li>
<li>处于开发中的工作项数量</li>
<li>截止某个时间点的平均前置时间</li>
<li>截至某个时间点为止的平均交付速率</li>
<li>通过变化发现交付及协作风险。</li>
</ol>
<p>关于累积流图的详细介绍请参考 <a href="cfd">累积流图</a></p>
<blockquote>
<p>PS. 累积流图看的是总体情况，无法跟踪某个特性或故事的情况。</p>
</blockquote>
<h3><a id="%E4%BD%BF%E7%94%A8%E5%A4%9A%E5%B1%82%E7%9C%8B%E6%9D%BF" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>使用多层看板</h3>
<p>大型项目涉及的工作项比较多，可能需要在不同层级和粒度上进行跟踪和管理，可以通过在不同层次表现不同级别的工作项来展现。</p>
<blockquote>
<p>卡片墙已经成为很多敏捷团队可视化工作内容的标配，比如通过磁力贴+索引卡或者白板+贴便利贴的方式跟踪进行中的工作。但是这些只能算是可视化控制系统（visual control system）而不是看板系统，它们只是通过让团队可视化的方式观察在制品并实现自组织，无需外部指令便可以自行分配并完成任务。但是它们并不能自动发送信号拉取新的工作项。</p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用户画像]]></title>
    <link href="http://www.agileworkshop.cn/16616165691467.html"/>
    <updated>2022-08-28T00:09:29+08:00</updated>
    <id>http://www.agileworkshop.cn/16616165691467.html</id>
    <content type="html"><![CDATA[
<p><img src="http://s.pyrlong.com/ob/20220501184614.png" alt="" /></p>
<p>我们的用户是谁？我们假设产品要解决的问题是真实存在的吗？是否还有我们没有发现的问题需要解决呢？回答所有这些问题都需要对我们的目标用户有一个准确的认识，用户画像就是描述我们用户信息，帮助我们认识用户的有力工具。</p>
<h2><a id="%E4%BB%80%E4%B9%88%E6%98%AF%E7%94%A8%E6%88%B7%E7%94%BB%E5%83%8F" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>什么是用户画像</h2>
<h3><a id="%E8%AE%A4%E8%AF%86%E7%94%A8%E6%88%B7%E7%94%BB%E5%83%8F" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>认识用户画像</h3>
<p>用户画像（Persona）最早是交互设计领域用来认识用户的工具之一，服务于以用户为中心的设计理念，后来也被广泛应用于产品需求挖掘与设计过程。用户画像是用户的具象化描述，是真实用户的虚拟代表，它是建立在一系列真实信息之上的目标用户模型，用于产品需求挖掘与交互设计。其本质就是一个标签化的用户模型，通过一系列的标签描述出目标用户的全貌。</p>
<blockquote>
<p>在互联网企业产品规划于营销过程中用户画像变得尤其重要，其生成手段也变得更加多样。<strong>可以通过收集用户的行为数据给用户的习惯、行为、属性贴上一系列标签，抽象出一个个真实用户的全貌，为广告推荐、内容分发、活动营销等诸多互联网业务提供了更多可能性。</strong> 它是当前互联网广告、个性化推荐、营销等业务的基础。</p>
</blockquote>
<h3><a id="%E7%94%A8%E6%88%B7%E7%94%BB%E5%83%8F%E7%9A%84%E6%9E%84%E6%88%90" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>用户画像的构成</h3>
<p>用户画像的输出是一个假设、验证的往复循环，先对目标用户进行假设（特点、兴趣、痛点等），然后选择高优先级画像对应类别的真实用户进行访谈、调研，再使用收集数据对它们进行完善，如此周期性的进行。</p>
<p>在一般的产品需求挖掘、交互设计等工作中一般会通过观察、调研、问卷等方法去了解目标用户，描绘他们的期望、行为、观点，将他们区分为不同的类型，然后从每种类型中抽取典型特征，赋予名字、性别、年龄、照片等人口统计学要素这样就生成了一个活生生的“用户”。</p>
<p>一般我们会结合产品类型事先选择一个用户画像的模板，然后围绕需要回答的问题进行假设与验证。</p>
<p><img src="http://s.pyrlong.com/ob/20220505145545.png" alt="" /></p>
<h3><a id="%E7%94%A8%E6%88%B7%E7%94%BB%E5%83%8F%E8%BE%93%E5%87%BA%E7%9A%84%E4%B8%80%E8%88%AC%E8%BF%87%E7%A8%8B" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>用户画像输出的一般过程</h3>
<h4><a id="%E6%84%BF%E6%99%AF%E4%B8%8E%E5%81%87%E8%AE%BE" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>愿景与假设</h4>
<p>在开始阶段我们需要基于我们的产品愿景和假设先框定一个较大的目标用户范围，然后基于已有的数据对范围内的目标用户进行初步的分析与筛选。确定初步的用户范围。然后结合产品愿景梳理用户画像模板，列出需要在用户画像内体现的信息，一般来说，用户画像会包括以下各方面的内容：</p>
<ol>
<li>基本属性，如 名字、性别、年龄、受教育程度、工作、收入水平、个人照片</li>
<li>行为特征：爱好、生活习惯、行为习惯、口头语、价值观等</li>
<li>用户存在的与当前产品领域相关的痛点、诉求等。</li>
<li>用户对于当前产品可能的爽点。</li>
</ol>
<p>确定好画像模板后，接下来需要制定用户接触计划，即以什么形式接触哪些用户，接触过程中需要回答哪些问题。</p>
<p>为了创建详尽的用户画像，产品研发团队需要规划多种类型的问题，可能涉及性别、年龄、城市、职业、收入、购物习惯、兴趣以及生活习惯等。产品研发团队可以根据实际情况删除或增添一些匹配产品目标的问题，重点是要基于产品类型和使用场景去制定有针对性的问题。如果设计的是B端产品，那么产品研发团队要更多地关注企业相关情况，比如企业规模、行业、营收等。</p>
<h4><a id="%E6%94%B6%E9%9B%86%E6%95%B0%E6%8D%AE" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>收集数据</h4>
<p>收集数据阶段就是执行前面规划的用户画像过程了，我们需要按照计划去接触不同类型的客户，按照规划尽可能多的收集用户的真实信息并如实记录。一般情况我们会通过观察、调研问卷、用户访谈、日志记录以及焦点小组等方式深入的了解用户，使用户描述更加丰满。在此过程中，切记不要虚构目标用户的特征。</p>
<p>这个过程中用户很可能并不了解自己行为背后真正的驱动因素。比如，用户买一副Beats耳机的原因是当作“炸街”装备，但他可能会说购买的理由是产品音质比较好。所以在这个阶段，产品研发团队除了了解用户的一些基本信息外，还要深入挖掘以上问题，通过多问“为什么”了解用户行为背后的深层动机。</p>
<p>在某些情况下，我们没有充足的时间和资源与目标用户面谈。但是，我们可以通过对竞争对手产品的洞察来创建用户画像，具体渠道包括电商产品页下的评论、同类产品相关社区以及社交媒体上相关产品的话题。</p>
<h4><a id="%E5%AE%8C%E5%96%84%E7%94%BB%E5%83%8F" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>完善画像</h4>
<p>用户调研之后，我们已经得到初步的用户画像。通过数据分析，我们可以对各个目标用户群体进行细分，找到他们的共性，比如他们面临的共同问题、当前采用的解决方案、期望的结果、痛点、爽点等。我们基于这些数据的分析结果可以整合得到一系列目标用户的画像信息，进一步完善画像内容，让用户画像更加真实。</p>
<p>研发人员可以根据实际情况或产品的类型对用户画像的内容进行自由调整。在完善用户画像时，利益干系人应尽可能多地参与进来，因为他们对用户画像的接受和认可是非常重要的，否则可能会在后面的产品功能定义阶段产生分歧。</p>
<p>顺利的话，完成这步工作后你会得到一系列目标用户的画像。</p>
<h4><a id="%E9%80%89%E6%8B%A9%E4%B8%8E%E4%BD%BF%E7%94%A8" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>选择与使用</h4>
<p>最后我们要选择一个用户作为主要的用户，把它当作产品的最优先满足的服务对象。产品研发团队要针对该用户进行产品设计，产品规划、指导开发。每一个用户画像都对产品有一些特定的需求，不同的用户画像对产品的需求可能存在一些重叠。因此我们可以选择忽略某些次要用户画像。虽然他们也会使用产品，但是设计方案不必故意迎合他们。注意，如果需要针对次要用户画像设计产品，采用的设计方案要避免对主要用户画像所采用的设计方案产生干扰，避免由于为次要用户画像的用户提供便利而影响到主要用户画像的用户的操作效率或体验。</p>
<p>最后，与尽可能多的干系人分享用户画像, 包括产品设计团队之外的人、未来将参与进来的人以及外部合作伙伴，目的是让大家对目标用户是谁、用户目标是什么等达成一致，时刻提醒大家从目标用户的角度去思考问题。</p>
<h2><a id="%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>应用场景</h2>
<p>用户画像可以服务于产品生命周期的大部分阶段，从最初的产品定位到后期的产品运营、营销活动策划。对从0-1的产品：在产品规划初期可以通过用户画像让团队更深入的了解我们潜在的目标用户，从中筛选出我们需要优先考虑的目标用户。帮助产品更准确的定位细分市场，通过对细分市场的目标客群画像进一步去定义产品的业务模式、核心功能，通过小步快跑、试错迭代逐步完善产品雏形。对于已经成熟的产品：用户画像可以帮助产品对现有市场及潜在市场进行分析，寻找可能的业务突破口，寻找新的用户群体、找到新的增长点、新的转型机会。</p>
<p>下面是一个产品从愿景到可开发需求的一个一般过程，结合这个过程我们列出了用户画像的常见应用场景。<br />
<img src="http://s.pyrlong.com/ob/20220505135515.png" alt="" /></p>
<p>在上图的过程中，用户画像主要在如下几个环节发挥作用：</p>
<ol>
<li>选择目标用户，识别用户期待与痛点。</li>
<li>梳理目标用户需要通过产品达成的业务场景。</li>
<li>梳理用户故事，规划路线图、MVP。</li>
</ol>
<h3><a id="%E9%80%89%E6%8B%A9%E7%9B%AE%E6%A0%87%E7%94%A8%E6%88%B7" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>选择目标用户</h3>
<p>在产品规划的早期阶段我们会识别出我们产品的大量的目标用户，但是我们的资源和时间都是有限的，我们必须选择出最高优先级的用户优先满足。这个过程中可以通过对潜在用户的画像让我们对潜在各类用户的特点、期待、痛点有具体的认识，然后对每类用户结合我们产品的愿景进行分析，选择出当下最重要的需要优先解决其痛点的用户。</p>
<blockquote>
<p>以滴滴打车为例，产品涉及 出租司机、黑车司机、老人、孕妇、企事业单位各类员工、游客等大量潜在用户。在其发展的不同阶段解决的是不同的目标用户的在不同场景下的问题：比如早期打通的是出租车和普通乘客的打车流程，解决的是出租车空驶、乘客打车不便的问题。后来又收编了黑车司机，再后来还推出了企业滴滴，解决了企业人员出行和报销的场景。</p>
</blockquote>
<h3><a id="%E8%A7%84%E5%88%92%E4%BA%A7%E5%93%81%E5%8A%9F%E8%83%BD" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>规划产品功能</h3>
<p>确定目标用户后，我们就需要梳理这个用户会与我们的产品产生交集场景，这个过程中我们会在选择的用户基础上进一步剖析用户，了解用户最需要通过我们产品完成哪些场景。这个过程我们会梳理用户旅程图、开展一系列的需求工作坊、甚至出一些草图、原型图，所有这些工作都需要围绕目标用户展开，用户画像的存在会使这个过程更加聚焦。大家都会知道现阶段所有这些工作的目标是 解决 张三（假设目标用户画像的名字是“张三”），当张三这个名字贯穿工作的各个环节的时候，可以大大提高大家的沟通效率，避免失焦。</p>
<h3><a id="%E6%A2%B3%E7%90%86%E7%94%A8%E6%88%B7%E6%95%85%E4%BA%8B" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>梳理用户故事</h3>
<p>基于用户画像可以让我们梳理用户故事时候更明确，更由针对性，每个故事都能清晰说明是给谁做的，让团队对故事的目标、价值能有更直观的认识。比如通常我们的用户故事会写成如下样子：</p>
<blockquote>
<p>作为一线办案的刑侦民警，我希望在获取授权后能够查看嫌疑犯近期的活动轨迹，以便于尽早定位嫌疑犯位置。</p>
</blockquote>
<p>假如我们有一个一线办案民警的画像叫老李，有对应的照片、姓名、年龄、职业、爱好等和产品相关的信息，那么上面的故事就可以写成：</p>
<blockquote>
<p>老李希望在获取授权后能够查看嫌疑犯近期的活动轨迹，以便于尽早定位嫌疑犯位置。</p>
</blockquote>
<p>这样我们在写用户故事的时候就会更有针对性，更直观，同时团队在讨论和开发这个故事的过程中也会更有代入感。</p>
<h2><a id="%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>注意事项</h2>
<h3><a id="%E4%B8%8D%E6%98%AF%E4%B8%80%E6%AC%A1%E6%80%A7%E5%B7%A5%E4%BD%9C" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>不是一次性工作</h3>
<p>和现实中我们了解一个人一样，对用户画像的描绘也是一个持续更新的过程，需要随着项目的深入不断丰满内容，让我们对用户产生更深入的了解。</p>
<h3><a id="%E4%B8%8D%E6%98%AF%E4%B8%80%E4%B8%AA%E5%85%B7%E4%BD%93%E7%9A%84%E4%BA%BA" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>不是一个具体的人</h3>
<p>在有一次培训课上，一个老师曾经说每个用户画像后面代表了一个具体的、真实的人，后来经过多方学习后发现这种说法有一些漏洞，老师所说的画像更多的应该是大数据场景下为了服务于个性化推荐等而产生的画像，和主要服务于产品设计的用户画像存在一定的差别。</p>
<p>用户画像的内容来源是一个个具体的人，但是作为最终输出的具象化的那个画像应该是一类具有类似特质的人的代表，目的是用它来代表一类用户群体，并基于产品定位对这个群体面临的主要问题提供解决方案。</p>
<h3><a id="%E7%94%A8%E6%88%B7%E7%94%BB%E5%83%8F%E4%B8%8D%E6%AD%A2%E4%B8%80%E4%B8%AA" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>用户画像不止一个</h3>
<p>多数产品所服务的用户都具有多样性和复杂性，因此用于代表用户的用户画像也需要不止一个来描述，一般情况下我们会迭代增加我们要服务的目标用户画像，根据目标用户的价值优先级不断添加新的用户画像。</p>
<h3><a id="%E7%94%A8%E6%88%B7%E7%94%BB%E5%83%8F%E5%B9%B6%E4%B8%8D%E8%83%BD%E4%BB%A3%E8%A1%A8%E6%89%80%E6%9C%89%E7%94%A8%E6%88%B7" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>用户画像并不能代表所有用户</h3>
<p>用户画像的目的是帮助我们更系统的去描绘目标用户，帮助我们更具象化的理解用户，它的目的并不包括穷尽产品的所有目标用户，更多情况下它代表的是我们系统需要关注的那些需要优先考虑的用户、最有可能接受我们产品的那批用户。</p>
<h3><a id="%E7%A1%AE%E4%BF%9D%E4%BF%A1%E6%81%AF%E6%9D%A5%E6%BA%90%E5%A4%9A%E6%A0%B7%E6%80%A7" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>确保信息来源多样性</h3>
<p>用户画像所用信息需要考虑周全，既要包括通过访谈、调研得到的定性数据同时也要尽可能包括关键的定量数据，可以通过自己系统内的埋点、购买行业数据等方式获取。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用户故事拆分]]></title>
    <link href="http://www.agileworkshop.cn/16616162041032.html"/>
    <updated>2022-08-28T00:03:24+08:00</updated>
    <id>http://www.agileworkshop.cn/16616162041032.html</id>
    <content type="html"><![CDATA[
<p>在用户故事一节中我们介绍了一个好的用户故事应该符合INVEST原则，那这些故事应该如何产生呢？有没有一些比较方便掌握的拆分原则可以借鉴呢？如何拆分故事以符合这些原则呢？下面我就带大家一起探讨一下用户故事拆分的基本方法和注意事项。</p>
<blockquote>
<p>如果你还不了解用户故事的一些基本知识可以参考这篇文章<a href="agile/story.md">用户故事</a>。</p>
</blockquote>
<h2><a id="%E6%8B%86%E5%88%86%E7%9A%84%E7%9B%AE%E7%9A%84" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>拆分的目的</h2>
<p>开始之前让我们先统一一下故事拆分的目的，<strong>故事拆分</strong>是在拆分什么呢？</p>
<h3><a id="%E4%BA%A7%E5%93%81%E7%AE%A1%E7%90%86%E8%A7%86%E8%A7%92" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a><strong>产品管理视角</strong></h3>
<p>故事拆分的过程就是把系统要达成的业务目标拆分为一个个小的阶段性目标的过程：<strong>拆分的目的是为了能更快、更早的帮助用户达成他的业务目标。</strong>  科学的拆分可以让用户看到自己的目标被一步步实现的过程，更利于用户与产品团队的沟通，更早的取得用户反馈，更快建立起用户对研发团队的信任。</p>
<h3><a id="%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E8%A7%86%E8%A7%92" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a><strong>项目管理视角</strong></h3>
<p>故事拆分过程也是把一个大的交付物逐级拆分为小的利于规划与管理的交付物的过程，与拆分WBS的目的类似，只有拆分到合适的粒度才能对每个交付物的负责人、开发顺序、交付时间等做出更合理的安排，保持较高的团队协作效率、降低项目执行过程中的风险，提高项目执行的成功率。</p>
<h4><a id="1%E6%8F%90%E9%AB%98%E9%9C%80%E6%B1%82%E6%B5%81%E5%8A%A8%E6%95%88%E7%8E%87%EF%BC%8C%E5%87%8F%E5%B0%91%E7%AD%89%E5%BE%85" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>1. 提高需求流动效率，减少等待</h4>
<p>目前大多数团队内都有比较明确的分工（如 前端 后端 移动端 测试），一个故事的交付需要经过多个角色的协作才能完成，拆分合理的故事更利于这些角色之间的协作，减少等待时间。如下图所示：</p>
<p><img src="http://s.pyrlong.com/ob/20220507110903.png" alt="" /><br />
将故事分解到一个合适的粒度，将大颗粒的故事变成为一个个短周期并行完成的故事，可以让项目内的所有资源在尽可能早的动起来，缩短等待时间。</p>
<h4><a id="2%E7%BC%A9%E7%9F%AD%E5%8F%8D%E9%A6%88%E8%B7%AF%E5%BE%84%E9%95%BF%E5%BA%A6%EF%BC%8C%E9%99%8D%E4%BD%8E%E9%A3%8E%E9%99%A9" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>2. 缩短反馈路径长度，降低风险</h4>
<p>在敏捷开发实践中每一个小用户故事的开发过程都是一系列反馈与验证的过程，小的故事让这个周期变得更短，利于更早的发现需求、设计等方面的问题和风险。大的故事很有可能会到最终测试的时候才发现需求遗漏、理解不一致、严重缺陷等，那时候的解决成本已经非常高了。</p>
<h4><a id="3%E6%9B%B4%E5%87%86%E7%A1%AE%E7%9A%84%E5%8F%8D%E5%BA%94%E9%A1%B9%E7%9B%AE%E8%BF%9B%E5%BA%A6" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>3. 更准确的反应项目进度</h4>
<p>产品开发过程中项目经理或产品经理最关心的可能就是进度了，适当粒度的用户故事可以让我们更及时、更准确的掌握开发的实际进度，因为我们没完成一个用户故事都能在测试环境或UAT环境看到实实在在的软件，都执行了确认动作，我们可以看到真实的进展，当出现进度延期风险时也能准确定位到造成延期的故事并进行针对性的干预。</p>
<h4><a id="4%E6%9B%B4%E5%88%A9%E4%BA%8E%E5%8C%BA%E5%88%86%E4%BC%98%E5%85%88%E7%BA%A7%E3%80%81%E5%81%9A%E5%87%BA%E5%8F%96%E8%88%8D" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>4. 更利于区分优先级、做出取舍</h4>
<p>我们经常遇到一个大需求扔过来，非常着急上线，完全没有商量的余地，团队加班加点上线后发现日常会用到的功能只占其中的一小部分，此时不免感叹要是能识别出这些常用功能，当初就不会那么匆忙了，交付质量也能做的更好一些。</p>
<p>面临这种情况的时候适当粒度的故事拆分就能发挥其作用了，因为每个故事都需要弄清楚其目标用户、应用场景、业务价值，这样我们就可以方便的找到核心业务场景，找到业务价值最高那部分功能了，当时间或资源紧张的时候能够快速做出取舍，确保核心功能的交付。</p>
<p>说了那么多拆分能带来的好处，那实际操作过程中我们应该如何拆分呢，下面我们总结了一些常见的拆分逻辑和示例供大家参考。</p>
<h2><a id="spidr%E6%8B%86%E5%88%86%E6%96%B9%E6%B3%95" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>SPIDR拆分方法</h2>
<p><img src="http://s.pyrlong.com/ob/20220507120223.png" alt="" /><br />
“SPIDR”方法是 Spike Path Interface Data Rule几个单词首字母的缩写，是Mike Cohn（Scrum 联盟的联合创始人）总结的拆分故事过程中的几个思考维度，他认为几乎每个故事都可以从这几个维度来拆分。</p>
<p>在介绍这几个方法之前我们必须要承认，并不是所有的故事都能拆分开，对于研究、探索性质的工作往往存在较大的不确定性，这类工作的拆分往往比较难，笔者曾经就遇到过一些不易拆分的故事，比如：</p>
<blockquote>
<p>将某个算法的准确率提升到某个百分比</p>
<p>研究某个开源框架的代码并修改以适应项目需要</p>
<p>……</p>
</blockquote>
<p>对于这类工作建议通过任务拆分的方式来进行跟踪，将为了达成这个大的目的需要做的事情梳理清楚，一般可以通过看板对任务状态进行跟踪。</p>
<p>下面介绍的是除以上极特殊情况之外用户故事该如何拆分：</p>
<p>故事拆分的最终目标是使其尽量符合INVEST原则，每个团队可以探索适合自己的拆分习惯和方法，下面列出了一些常见的拆分思路，希望对大家有所启发。</p>
<h3><a id="spikes%E5%88%BA%E9%92%88%E6%95%85%E4%BA%8B" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>Spikes - 刺针故事</h3>
<p>Spike 是敏捷软件开发中经常使用的一个术语。它通常用来代表那些探索性、验证性的工作，比如对一个复杂功能的原型实现，评估可行性，对一个新技术进行验证评估其是否可用。</p>
<p>当我们面对一个故事无从下手时候多数情况是我们对故事索要实现的业务或者所使用的技术还存在盲区，这时候可以考虑通过创建Spike故事先对盲区进行相应的探索，解决了盲区问题后再对故事进行进一步拆分。</p>
<p>如果在拆分故事过程中出现以上情况，或者其他拆分方法效果不佳，则可用尝试使用这种方法。在这些新获得的知识的帮助下，一些故事可以更好地被理解、更容易拆分。当然，由于这种方法相对抽象，因此比其他方法更难熟练应用。</p>
<h3><a id="paths%E2%80%94%E8%B7%AF%E5%BE%84" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>Paths—路径</h3>
<p>这是最常用的一种拆分思路，和我们梳理用户故事时候的用户旅程图很像，很像一个mini的旅程图，我们通过梳理用户在这个故事中是如何使用我们的系统的，存在哪些操作路径，主路径是什么，存在哪些分支路径，基于这些信息分别拆分出不同的故事了。</p>
<p><strong>示例</strong></p>
<blockquote>
<p>以一个打车的支付场景为例，我们可以拆分为如下几个故事：</p>
<p>作为乘客我希望行程结束后可以使用现金完成支付。</p>
<p>作为乘客我希望行程结束后可以使用信用卡完成支付。</p>
<p>作为乘客我希望行程结束后可以使用PayPal完成支付。</p>
<p>作为集团客户的乘客我希望行程结束后可以使用集团信用额度进行支付。</p>
<p>……</p>
</blockquote>
<p>另外在依据路径拆分实践中还可以从业务路径视角去拆分，我们的目标可能是一个非常长的业务流程，这个完整的流程对客户才有价值，这种情况可以考虑这个业务流程是不是可以先拆分出业务流程的开始和结束，然后再从不断完善或增加新的节点以实现完整的业务流程。或者可以先拆分出业务流程的最简单路径，然后再添加更多的步骤来完善业务流程。这样一来，就可以把描述业务流程的用户故事拆分为开始流程，结束流程，中间流程；还可以拆分成简单流程，流程完善等等不同的小用户故事；</p>
<h3><a id="interfaces%E7%95%8C%E9%9D%A2%E6%8E%A5%E5%8F%A3" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>Interfaces - 界面/接口</h3>
<p>当故事涉及多个不同的用户界面类型时可以考虑这种拆分方法，比如如果你的应用涉及PC端、移动端，而PC端浏览器又包括Chrome\Edge\Firefox，移动端又分Android\IOS\小程序，拆分的时候就可以基于对以上不同端支持的优先级进行拆分，然后分别交付，如果故事本身不那么大，拆到单个端过小也可以按照实现的难易程度进行拆分，拆分为一批需要支持的端、第二批需要支持的端。</p>
<p>还有一种情况是故事涉及不同的交互方式或交互体验：比如将数据处理核心逻辑先拆分为基于命令行的故事，然后再逐步增加更友好的交互界面、配置支持、定时任务等。还可以在拆分前期先弱化界面美观、操作友好度等问题，待核心业务流程支持后再逐步优化这部分内容，这在2B项目中往往是好办法，因为需求的不确定性和易变性，过早去优化界面和交互往往会造成浪费。</p>
<p><strong>示例</strong></p>
<blockquote>
<p>作为航空公司用户，我想要搜索两个目的地之间的航班，以便可以根据自己的情况选择购买；按照关键&gt; 路径，我们可以尝试如下拆分：</p>
<p>1.作为航空公司用户，我想要使用简单的日期输入就可以搜索该时间段的航班，以便可以进行比较选择；</p>
<p>2.作为航空公司用户，我想要通过精美的日历界面勾选时间，进而可以搜索该时间段的航班，以便在进行&gt; 航班比较时可以有更人性化的体验；</p>
<p>3.作为航空公司用户，我想要查询可以转机的航班，以便我可以在旅途中去其他城市看看；</p>
</blockquote>
<h3><a id="data%E6%8C%89%E6%95%B0%E6%8D%AE%E8%A7%84%E5%88%99%E6%88%96%E7%B1%BB%E5%9E%8B%E6%8B%86%E5%88%86" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>Data-按数据规则或类型拆分</h3>
<p>当故事涉及数据类型、数据范围时可以从故事的输入输出数据视角进行梳理，找到系统存在哪些类型的输入和输出数据并据此进行拆分。比如下面的例子：某运营商系统需要分别读取华为、中兴、爱立信的数据进行分析并生成结果，那我们就可以按照需要支持的不同类型厂家的数据进行拆分。</p>
<p>另外还可以从故事可以支持的不同数据类型入手进行拆分，如我们常见的微信发送消息功能的拆分：</p>
<p><strong>示例</strong></p>
<blockquote>
<p>1.作为微信用户，我想发送文本信息，以便微信好友方便清晰的知道我想表达的观点；</p>
<p>2.作为微信用户，我想发送多媒体信息等，以便在我感觉尴尬或者不知道怎么用文字表达时，可以代替我想说的话，能缓解尴尬。</p>
<p>3.作为微信用户，我想发送带附件的信息，以便可以快速传递给微信好友想要的文件等内容。</p>
</blockquote>
<h3><a id="rules%E6%8C%89%E4%B8%8D%E5%90%8C%E4%B8%9A%E5%8A%A1%E8%A7%84%E5%88%99%E8%BF%9B%E8%A1%8C%E6%8B%86%E5%88%86" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>Rules-按不同业务规则进行拆分</h3>
<p>按照业务规则和技术标准对用户故事进行拆分。一些业务逻辑会带有很多额外的规则，我们可以尝试逐步去支持这些规则，将用户故事按照规则进行拆分。</p>
<p><strong>示例</strong></p>
<blockquote>
<p>在线售票系统，一些热门场次会需要限制单用户购票数量，但是在试运行阶段根本不会将系统应用在热门比赛中，因此这个限制完全可以在主流程完成后的冲刺中加入支持。</p>
</blockquote>
<h2><a id="%E5%85%B6%E5%AE%83%E6%8B%86%E5%88%86%E6%80%9D%E8%B7%AF" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>其它拆分思路</h2>
<h4><a id="%E6%8C%89%E5%8A%9F%E8%83%BD%E9%9D%9E%E5%8A%9F%E8%83%BD%E6%8B%86%E5%88%86" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>按功能/非功能拆分</h4>
<p>有时候一些性能等非功能性需求，也会大大增加这个用户故事的复杂度，这种情况下我们就可以把用户故事按照功能/性能进行拆分，先满足功能需求，使系统可以工作，之后再满足性能等其他非功能性。</p>
<p><strong>示例</strong></p>
<p>作为一个xx用户，我希望在1秒内看到查询结果。这里提出1秒，就涉及到了非功能性需求，我们可以这样拆分：</p>
<blockquote>
<p>1.作为系统用户，我想要看到我查询的结果，以便缩小范围快速找到我想要的相关信息；<br />
2.作为系统用户，我想要查询结果在1秒全部显示完成，以便快速定位查找；</p>
</blockquote>
<p>在功能和非功能共存的情况下，建议功能性需求稍稍早于非功能性需求所在的迭代。</p>
<h4><a id="%E6%8C%89%E7%94%A8%E6%88%B7%E6%95%85%E4%BA%8B%E6%89%80%E4%BE%9D%E8%B5%96%E7%9A%84%E5%86%85%E5%AE%B9%E8%BF%9B%E8%A1%8C%E6%8B%86%E5%88%86" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>按用户故事所依赖的内容进行拆分</h4>
<p>如果用户故事对其他接口或系统有依赖，那我们可以把逻辑复杂或该用户故事所依赖的部分进行隔离，采用单独的一个用户故事描述这个依赖。</p>
<p><strong>示例</strong></p>
<p>作为某购物网站的商家，我想通过数据分析网站进行访客分析，以便发现规律，制定相应的运营策略；这个场景下，数据分析网站和某购物网站之间需要数据打通才可以实现该功能。那我们可以这样拆分：</p>
<blockquote>
<p>1.作为购物网站商家，我想要在数据分析网站进行埋点，以便可以通过该数据分析网站采集访客相关数据。<br />
2.作为购物网站商家，我想要通过数据分析网站获取店铺的访问用户及相关信息，以便对访客数据进行分析，发现规律，从而制定我的运营策略；</p>
</blockquote>
<h4><a id="%E6%8C%89%E7%85%A7%E9%AA%8C%E6%94%B6%E6%A0%87%E5%87%86%E8%BF%9B%E8%A1%8C%E6%8B%86%E5%88%86" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>按照验收标准进行拆分</h4>
<p>还有一种情况，产品解决方案层面无法再继续拆分时，可以求助开发团队。用户故事的验收标准对用户故事的主题和内容进行了更完善的补充，由此我们可以尝试按照用户故事验收标准进行拆分，同时如果发现用户故事有很多小的验收标准，也可以尝试将多个验收标准打包成一个用户故事；</p>
<h2><a id="%E4%B8%80%E4%BA%9B%E5%BB%BA%E8%AE%AE" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>一些建议</h2>
<ol>
<li>不是所有的用户故事都需要拆分，颗粒度大小合适的，在一个冲刺内可以完成的，符合INVEST原则的，就是合适的。我们需要做的就是和开发团队一起从产品和技术两个角度去判断是否需要进一步拆分。</li>
<li>拆分工作是团队的事情，目的是让团队在拆分过程中对需求目标、完成标准有更充分的讨论和理解。</li>
<li>需要避免过存在过多过小的用户故事，过多过小的用户故事意味着不同角色之间存在更多次的工作切换同样不利于提高协作效率。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用户故事地图]]></title>
    <link href="http://www.agileworkshop.cn/16616166316812.html"/>
    <updated>2022-08-28T00:10:31+08:00</updated>
    <id>http://www.agileworkshop.cn/16616166316812.html</id>
    <content type="html"><![CDATA[
<p><img src="http://s.pyrlong.com//f20/20220412102904.png" alt="" /></p>
<h2><a id="%E7%94%A8%E6%88%B7%E6%95%85%E4%BA%8B%E5%9C%B0%E5%9B%BE%E6%98%AF%E4%BB%80%E4%B9%88" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>用户故事地图是什么</h2>
<p>User Story Mapping 是Jeff Patton最早提出的，并在他的《用户故事地图》一书中进行了详细的描述。从其英文名来看其更合理的翻译应该是 <strong>”用户故事映射图“</strong>。因此我们可以定义用户故事地图：</p>
<blockquote>
<p>用户故事地图，就是由一个一个大大小小的用户故事，所拼出来的一幅产品用户故事的映射关系图。</p>
</blockquote>
<p>它提供了一种新的工具用于生产与组织用户故事，可以将你的backlog变成一张二维映射关系，而不是传统的简单列表。从只能关注一个个故事到能看到整个产品的全貌。他的一般展现形式如下：<br />
<img src="http://s.pyrlong.com//f20/20220412103139.png" alt="" /></p>
<p>图中从左到右是一个用户行为时间线，从上到下是支撑这个行为所需提供的功能和服务，越靠上的越重要，优先级越高。然后可以根据团队的交付能力，规划出我们的版本计划、冲刺计划。</p>
<p>以上就是用户故事地图的核心，它提供了我们从全局视角去梳理、组织、规划用户故事的能力，让我们既见树木又见森林。</p>
<h4><a id="%E4%B8%8B%E9%9D%A2%E6%A2%B3%E7%90%86%E4%BA%86%E4%BD%BF%E7%94%A8%E7%94%A8%E6%88%B7%E6%95%85%E4%BA%8B%E5%9C%B0%E5%9B%BE%E5%8F%AF%E4%BB%A5%E5%B8%A6%E7%BB%99%E6%88%91%E4%BB%AC%E7%9A%84%E5%A5%BD%E5%A4%84" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>下面梳理了使用用户故事地图可以带给我们的好处</h4>
<ul>
<li>看清backlog的全貌 (Holistic view of backlog）</li>
<li>为新功能筛选（backlog grooming &amp; planning）和划定优先级提供了更好的工具，帮助你做出决策</li>
<li>便于使用静默头脑风暴模式 (brainstorming) 和其他协作方式 (team collaborative) 来产生用户故事</li>
<li>帮助你更好的进行迭代增量式开发，同时确保早期的发布可以验证整体架构和解决方案</li>
<li>为传统的项目计划提供了一个更好的替代工具</li>
<li>有助于激发讨论和管理项目范围</li>
<li>允许你从多个维度进行项目规划，并确保不同的想法都可以得到采纳</li>
</ul>
<h2><a id="%E4%BD%BF%E7%94%A8%E7%94%A8%E6%88%B7%E6%95%85%E4%BA%8B%E5%9C%B0%E5%9B%BE" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>使用用户故事地图</h2>
<p>用户故事地图的产出过程可以概括为 思考 记录 讲解 摆放 几个过程，一般初始版本会通过一个工作坊的形式产出，下面是基于一个OKR系统开发的例子展示的一个用户故事地图的例子：</p>
<p>最上一行红色框中的是这个产品的功能骨架，是用户在这个场景下正常完成目标所需的必要过程，下面一行开始是为了支撑用户完成上面的操作系统需要具备的功能的罗列。<br />
<img src="http://s.pyrlong.com/ob/20220507144420.png" alt="" /></p>
<p>通过对为了支撑每步操作所需的功能进行排序，挑出足以支撑完成核心流程的部分故事作为MVP范围，然后依次规划出后面一到两个版本需要实现的功能。<br />
<img src="http://s.pyrlong.com/ob/20220507144543.png" alt="" /></p>
<p>最后根据团队产能将故事规划进冲刺，形成了我们初步的冲刺规划图<br />
<img src="http://s.pyrlong.com/ob/20220507144732.png" alt="" /></p>
<p>以上就是一个比较典型的使用用户故事地图去规划产品版本和冲刺的过程，输出用户故事地图的难点在于找到适当粒度的业务流程骨架，然后在其基础上去丰富功能。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用户故事估算-计划扑克]]></title>
    <link href="http://www.agileworkshop.cn/16616162474380.html"/>
    <updated>2022-08-28T00:04:07+08:00</updated>
    <id>http://www.agileworkshop.cn/16616162474380.html</id>
    <content type="html"><![CDATA[
<h2><a id="%E4%B8%BA%E4%BB%80%E4%B9%88%E9%80%89%E6%8B%A9%E8%AE%A1%E5%88%92%E6%89%91%E5%85%8B" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>为什么选择计划扑克</h2>
<p>对于估算常用的估算方法是专家判断、类比、分解，在敏捷实践过程中为了达到最佳效果我们会综合使用这三种方法，这种方法就是”计划扑克“，计划扑克把专家判断、类比、分解三种方法很好的结合到了一起，游戏过程将不同领域专家的意见都进行了考虑，并且促成了活跃的讨论，可以快速可靠的完成估算。事实证明计划扑克方法对提高估算效率和准确性及其有效。</p>
<p><img src="http://s.pyrlong.com/ob/607476c7170e4ad69d732d6a028297ad.jpg" alt="" /></p>
<h1><a id="%E4%BB%80%E4%B9%88%E6%98%AF%E8%AE%A1%E5%88%92%E6%89%91%E5%85%8B%E4%BC%B0%E7%AE%97" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>什么是计划扑克估算</h1>
<p>计划扑克是一种基于共识的估算技术。世界上很多敏捷团队使用计划扑克的方法来估算他们的Product Backlog.计划扑克可以用于估算故事点，理想人天或者其他估算单位。</p>
<p>计划扑克估算法，基于德尔菲法原理，把专家判断、类比估算、分解 三种常用估算方法很好的结合到了一起，可以快速可靠的完成估算。游戏过程将不同领域专家的意见都进行了考虑，并且促成了更活跃的讨论，经过长期的实践证明这对提高估算效率和准确性及其有效。</p>
<p>扑克估算法的优点是团队成员参与共创，促进团队成员信息交流共享，使估算结果更加全面准确。其缺点是需要控制沟通渠道，仅适用于3-9人的小型敏捷团队，大型团队需要进行拆分后使用。</p>
<h2><a id="%E8%AE%A1%E5%88%92%E6%89%91%E5%85%8B%E4%BC%B0%E7%AE%97%E6%B5%81%E7%A8%8B" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>计划扑克估算流程</h2>
<h3><a id="%E8%B0%81%E5%8F%82%E4%B8%8E%E4%BC%B0%E7%AE%97" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>谁参与估算</h3>
<ol>
<li>
<p>计划扑克游戏需要团队成员全部参与估算，包括所有程序员、测试、交互设计师。</p>
</li>
<li>
<p>产品负责人也需要参与估算会议，但是他不参与估算，只是对团队疑问进行解答。</p>
</li>
<li>
<p>团队规模不能过大，最好不超过10个人，如果太大会影响估算效率。</p>
</li>
</ol>
<h3><a id="%E4%BC%B0%E7%AE%97%E8%BF%87%E7%A8%8B" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>估算过程</h3>
<p>估算会议召开前，产品负责人应该已经对产品待办列表完成了梳理，将要进入下个冲刺的故事必须满足INVEST原则，故事的验收标准已经经过了初步的梳理与沟通，满足这些条件后就可以进入计划扑克游戏了，游戏过程：</p>
<p>开始估算前，每个参与者都会分到一副估算扑克，以0，1，2，3，5，8等斐波那契数列作为面值，也可以使用微信小程序代替纸质的扑克。</p>
<ol>
<li>估算开始后，主持人从产品待办列表顶部抽取一个要估算的故事，大声读出故事名，描述，验收条件等内容。</li>
<li>每个估算者针对该故事提出自己的疑问，产品负责人对疑问进行解答，确保大家对完成定义理解一致。</li>
<li>所有问题都澄清后，主持人组织大家估算，每个估算者选择自己的估算结果，在所有人都选好后一起亮出自己的估算值，让彼此看到。</li>
<li>然后主持人会进行判断，如果大家给出的估算值不一样，甚至差别很大，这时需要让估算最高和最低的人分别说明自己的估算理由，引导大家进行简短的沟通，确保大家对实现内容、验收标准、实现思路达成一致，然后再次组织大家出牌。</li>
<li>重复第三步和第四步直到大家达成基本一致。</li>
<li>重复以上步骤，直到每个待估算故事都完成估算。</li>
</ol>
<h3><a id="%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>注意事项</h3>
<blockquote>
<ol>
<li>
<p>当经过两到三轮估算仍不能达成一致时，这时候可以考虑取一个大多数人能接受的值，避免在一个故事的估算上纠结太久。</p>
</li>
<li>
<p>估算之前团队应该具备相关领域知识，最好是对要估算的故事进行了预先的了解。</p>
</li>
<li>
<p>如果不具备每次全员参与计划扑克游戏的条件，让部分经验丰富的人来负责估算也是可以的，但是每次不能低于三个人。</p>
</li>
</ol>
</blockquote>
<h2><a id="%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BC%B0%E7%AE%97" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>什么时候估算</h2>
<p>在完成初始产品待办列表（Product Backlog)后大多数团队需要举行计划扑克会议来完成初始评估，这个过程可能会分散到几天的时间内，以帮助团队了解产品初始范围，确定产品的规模。因为产品待办项会在项目过程中持续增加，很多团队会发现每个迭代执行一次估算和计划活动是很有帮助的。通常这个过程会在迭代完成的前几天完成，可以选择在站会后组织，这样能确保大家都在一起。原则就是当需要进行估算的新故事积累到你觉得需要估算时就组织一次估算游戏。下面是一些比较常见的估算时间点： </p>
<ol>
<li>第一次冲刺之前：产品第一个冲刺开始之前通常会有大量故事需要进行估算，这时可以专门组织一到多次估算会议，以便于产品负责人可以基于这些估算成果制定产品路线图和发布计划。</li>
<li>在冲刺过程中发现新的故事时也需要进行估算，我们一般会累积一个冲刺过程发现的新故事，并且在梳理下一冲刺的故事过程中进行估算。</li>
<li>在计划会上对未估算故事或者发生变化的故事进行估算。</li>
<li>极限编程的发明人Kent Beck建议可以在墙上放个纸袋，团队可以把发现的新故事放进去，有时间时就去袋里拿几个故事，叫上大家估一下。</li>
</ol>
<p>总结来说就是 在你认为需要和条件成熟的时候就进行估算，但是最晚的估算窗口是计划会。</p>
<h1><a id="%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>常见问题</h1>
<p><strong>如果经过几轮估算都无法达成一致怎么办？</strong></p>
<blockquote>
<p>当经过三轮甚至以上仍不能达成一致时，这时候可以考虑取一个大多数人能接受的值，避免在一个故事的估算上耗费过多时间，注意敏捷估算的重点不在于绝对精确，而在于让其合理。</p>
</blockquote>
<p><strong>计划扑克必须要全员参加吗？</strong></p>
<blockquote>
<p>在敏捷中没有什么是绝对的，这个原则在这里同样适用。如果不具备每次全员参与计划扑克游戏的条件，这时让部分经验丰富的人来负责估算也是可以的，但是每次不能低于三个人，且要包括开发、测试等重要角色，并且需要确保潜在会负责该故事的人员要参与估算，特别是采用绝对估算时。</p>
</blockquote>
<p><strong>估算时应该考虑哪些因素的影响？</strong></p>
<blockquote>
<p>故事点估算必须包括完成故事所需投入的所有工作，特别要考虑产品待办列表中定义的所有完成定义。例如团队的完成的定义包括创建自动化测试脚本以验证故事准确性，则创建这些测试脚本的工作就应包括在估算结果中。</p>
</blockquote>
<p><strong>为什么使用斐波那契数列</strong></p>
<blockquote>
<p>这是很多人都会有的一个疑问，为什么不使用自然顺序的数字而要用斐波那契数列呢？这是因为一个任务越复杂，估计值越大的时候，估算的准确性也就越低，这个时候再去纠结它的结果是13还是14已经没有意义了。为了避免因此导致的没有意义的争论，提醒我们这个任务可能太大了，需要拆解，所以才使用了步长越来越大的斐波那契数列。在实践中，一些团队会规定超过8的故事必须进行拆分。</p>
</blockquote>
<p><strong>如果团队估算不出来怎么办？</strong></p>
<blockquote>
<p>一般可能导致团队无法估算出结果的情况包括 故事粒度过大、未对需求充分理解、不熟悉实现需求所需技术。</p>
<p>对于粒度过大的情况需要团队和产品负责人一起尝试将其进一步拆分到合适的粒度，然后再尝试进行估算。</p>
<p>对于未对需求充分理解的情况说明团队成员需要进行更多的业务知识的培训或讨论，赶快组织一个有效的培训吧。</p>
<p>对于因为不熟悉技术导致的情况，建议创建一个单独的探针故事，摸清所需的技术条件，然后基于探针故事的执行结果再组织这个故事的估算。</p>
</blockquote>
<p><strong>计划扑克真的有效吗</strong></p>
<p>当然很有效，很多研究报告都表明团队使用计划扑克估算得出的结果比以往任何估算方法得出的结果都要准确。</p>
<blockquote>
<ol>
<li>首先，敏捷扑克能得到更好的估算结果是因为它汇集了多个专家的意见。这些跨领域的专家的意见考虑到了软件开发过程的所有学科意见，他们比任何人都更适合于估算任务。在完成有关软件评估的文献的全面审查之后，Simula Research Lab 的Magne Jørgensen博士得出结论，“最有能力解决任务的人员应该对其进行估计。”</li>
<li>其次，在计划扑克过程中进行了激烈的讨论，同行们会要求估算者证明其估算的合理性。研究人员发现，这个过程提高了估计的准确性，尤其是对于大多数软件项目中存在很多不确定性而言。</li>
<li>进一步，在估算者被要求说明自己估计值的原因与合理性的时候，可以彼此弥补对待估算的条目信息的理解缺失，让大家更全面的了解被估算的对象，这对敏捷项目很重要，因为用户故事通常包括很多有意或无意的含糊描述。</li>
<li>此外，研究表明，在敏捷估算和规划期间计算每个估算的平均值会带来更好的结果，就像对评估值进行小组讨论一样。</li>
</ol>
</blockquote>
<h2><a id="%E6%89%A9%E5%B1%95%E9%98%85%E8%AF%BB" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>扩展阅读</h2>
<p><a href="story-point.md">故事点</a></p>
<p><a href="scrum-planning-meeting.md">冲刺计划会</a></p>
<p><a href="story-create.md">用户故事拆分</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用户故事]]></title>
    <link href="http://www.agileworkshop.cn/16616161416747.html"/>
    <updated>2022-08-28T00:02:21+08:00</updated>
    <id>http://www.agileworkshop.cn/16616161416747.html</id>
    <content type="html"><![CDATA[
<p>用户故事几乎是实践敏捷绕不过去的一个概念，也会带来很多疑惑和问题，那什么是用户故事？为什么要使用用户故事？如何使用用户故事呢？</p>
<h2><a id="%E5%8E%86%E5%8F%B2" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>历史</h2>
<p>最早提出用户故事这一概念是极限编程社区。</p>
<ul>
<li>1997年的克莱斯勒C3项目中Kent Beck首次引入了用户故事。</li>
<li>1999年Kent Beck在其 《<strong>解析极限编程</strong>》一书中首次系统介绍了如何在规划游戏中使用用户故事。</li>
<li>2001年罗恩·杰弗里斯(Ron Jeffries)提出了用户故事“3C”模型。</li>
<li>2004年Mike Cohn在他的经典著作《<strong>用户故事与敏捷方法</strong>》一书中系统说明了用户故事的定义、价值及其使用方法，该书被认为是用户故事使用的事实标准，直接推动了用户故事这一工具的广泛应用，我们现在所谈论和使用的大部分关于用户故事的概念和方法主要参考该书的观点。</li>
</ul>
<h2><a id="%E4%BB%80%E4%B9%88%E6%98%AF%E7%94%A8%E6%88%B7%E6%95%85%E4%BA%8B" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>什么是用户故事</h2>
<p>Mike Cohn在其《<strong>用户故事与敏捷方法</strong>》中对用户故事的定义是：</p>
<blockquote>
<p>用户故事描述了对用户、系统或软件购买者有价值的功能。</p>
</blockquote>
<p>维基百科对用户故事的解释是</p>
<blockquote>
<p>用户故事可以看做是产品开发过程中对系统特征的一种非正式的自然语言描述，它们一般从用户的视角描述，通常的表现形式是一张张索引卡片或者便利贴，根据产品类型和业务背景的不同，它们可以由客户、用户、产品经理或研发团队编写。</p>
</blockquote>
<h2><a id="%E7%94%A8%E6%88%B7%E6%95%85%E4%BA%8B%E7%9A%84%E7%BB%84%E6%88%90" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>用户故事的组成</h2>
<p>一般情况下用户故事至少要包括故事标题、故事描述、验收标准（AC），另外还有一些可选信息 比如 关联文档、原型、优先级、估算结果、经办人、关联版本等必要信息。</p>
<p><img src="http://s.pyrlong.com/ob/20220404012046.png" alt="" /></p>
<h3><a id="%E6%95%85%E4%BA%8B%E6%A0%87%E9%A2%98" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>故事标题</h3>
<p>标题是包含足够信息又简洁、清晰的一小段文字，可用于指代具体的故事，可以在做计划、讨论过程中作为标识。简洁的标题可以大大提高团队的沟通效率。</p>
<h3><a id="%E6%95%85%E4%BA%8B%E6%8F%8F%E8%BF%B0" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>故事描述</h3>
<p>这部分体现的是用户故事的最关键信息，通常会选择遵循一种或多种格式模板。</p>
<p>最常见的是Connextra的模板，也就是我们常说的用户故事的三段式写法：</p>
<blockquote>
<p>As a  <strong>role</strong> I can <strong>capability</strong>, so that <strong>receive benefit</strong></p>
</blockquote>
<p><strong>示例</strong></p>
<blockquote>
<p>a. 作为人力资源经理，我想创建一个初试测验，以便决定是否要将可能的应聘人员发送给职能经理。</p>
<p>b. 作为云盘用户，我可以选择不要备份的文件夹，这样我的云盘空间就不会被我不需要保存的东西填满。</p>
</blockquote>
<p><em>Mike Cohn认为 “So That&quot; 子句不是必须的,可以根据情况作为选项之一。</em></p>
<p>Chris Matts 的观点是：要开发一个成功的软件产品 “<strong>寻找可提供的价值</strong>” 应该是第一位的，因此他提出了自己的故事编写模板：</p>
<blockquote>
<p>In order to <strong>receive benefit</strong> as a <strong>role</strong>, I can <strong>goal/desire</strong></p>
</blockquote>
<p>还有一种是偶尔会使用的5W模板</p>
<blockquote>
<p>As  <strong>who ,when ,where</strong>, I want <strong>what</strong> because <strong>why</strong></p>
</blockquote>
<h3><a id="%E9%AA%8C%E6%94%B6%E6%A0%87%E5%87%86ac" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>验收标准(AC)</h3>
<p>Mike Cohn 将验收标准定义为“<strong>它是对于故事必须做到什么才能让客户或管理者接受它的完整说明</strong>”。在实践中我们可以把用户验收标准看做一条条独立的的、可验证的规则清单。它定义了判断一个故事是否完成的最基本要求。</p>
<h4><a id="%E5%A6%82%E4%BD%95%E6%A2%B3%E7%90%86%E9%AA%8C%E6%94%B6%E6%A0%87%E5%87%86%E5%91%A2%EF%BC%9F" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>如何梳理验收标准呢？</h4>
<ol>
<li>
<p>站在用户验收系统的视角进行梳理：<strong>假设系统已经上线了，系统的用户来验收，它们会关注什么，如何验收</strong> ，围绕用户真实使用场景进行思考和讨论 每个故事发生的场景、触发时机、期望结果。 初期实践可以考虑采用Given When Then的格式来梳理，即：</p>
<blockquote>
<p>Given (给定场景/条件下) When （做了什么操作/或满足什么条件) Then （得到什么结果）</p>
</blockquote>
</li>
<li>
<p>梳理过程中要同时考虑Happy Path、Sad Path 和 Exceptional Path，避免遗漏，</p>
</li>
</ol>
<p>详情请参考 <a href="story-ac.md">故事验收标准</a>。</p>
<h4><a id="%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E9%AA%8C%E6%94%B6%E6%A0%87%E5%87%86%E6%98%AF%E5%90%A6%E5%90%88%E6%A0%BC%EF%BC%9F" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>如何判断验收标准是否合格？</h4>
<ul>
<li>描述是否简单易懂， 没有歧义。</li>
<li>是否表达了用户的全部核心意图</li>
<li>关键场景是否覆盖全面，逻辑是否清晰，是否符合MECE原则</li>
<li>是否做到不涉及界面、技术实现细节</li>
<li>能否直接作为验收测试用例</li>
<li>是否能作为团队自测、用例输出的依据</li>
</ul>
<h2><a id="3c%E5%8E%9F%E5%88%99" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>3C原则</h2>
<p>传统的用户故事是以卡片形式记录的，极限编程创始人之一 Ron Jeffries 对如何得到一个故事的进行了系统说明，他选择了三个以C开头的字母作为代表——卡片（Card）、对话（Conversation）、确认（Confirmation），即著名的用户故事3C模型。该模型很好的概括了一个围绕故事的需求梳理过程：<strong>将一个想法以故事的形式写到卡片上、团队成员围绕故事卡进行讨论、最终得到并记录如何判断该故事已经完成的一致理解。</strong></p>
<h3><a id="card%E5%8D%A1%E7%89%87" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>Card 卡片</h3>
<p>产生并记录灵感是我们识别用户故事的第一步，通常我们的用户或者产品在有一个新的想法或需求的时候会先将其写到一张卡片上，目的是促成后续一系列围绕它的讨论。</p>
<p>卡片或便利贴是用户故事最常用的载体，团队通常会用卡片来记录用户故事的相关信息，并且卡片可以方便的挪动、备注、讨论这个故事，每个人都可以用做标记，做批注，更利于讨论和理解。需要注意的是卡片上描述内容需要尽量简洁，使用的词汇要有明确且统一的含义，确保项目成员不会对同一描述有差异性理解。</p>
<blockquote>
<p>需要注意的是卡片就像图书馆里的图书索引卡，它的作用是代表一个需求，但不是需求本身。</p>
</blockquote>
<h3><a id="conversation%E5%AF%B9%E8%AF%9D%E8%AE%A8%E8%AE%BA" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>Conversation 对话/讨论</h3>
<p>团队成员看到产品或客户写了一张新的卡片贴到墙上时往往就会产生好奇或疑惑，他们会试图弄清楚客户或产品想得到什么，这自然而然的会触发一系列围绕该卡片主题的讨论和记录。而这正是使用用户故事的初衷，我们的关注点从来不是那张小卡片本身，而是看到那张卡片时能想起来对话的过程和结论。</p>
<h3><a id="confirmation%E7%A1%AE%E8%AE%A4" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>Confirmation 确认</h3>
<p>围绕卡片我们进行讨论的最终目的就是得到针对该故事的一系列确定性信息，Confirmation部分就是对讨论过程中形成的各类确定性信息进行记录和确认的过程：满足哪些条件这个故事就算完成了（验收标准）、客户对这个故事的上线时间有何期待、讨论过程中识别了哪些需要解决的风险、依赖、待办事项等等。</p>
<h2><a id="invest%E5%8E%9F%E5%88%99" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>INVEST原则</h2>
<p>如何判断一个用户故事的好坏呢，我们一般关注六个方面的特征，分别是：<em>独立性 Independent、可讨论性 Negotiable、对用户或客户有价值 Valuable、可估算 Estimable、小的 Small、可测试 Testable</em>，《探索极限编程》和《重构工作手册》的作者Bill Wake 建议用<strong>INVEST</strong>来代表这六个特性。下面我们分别从这六个方面说明一下一个好的用户故事的特点：</p>
<h4><a id="independent%E7%8B%AC%E7%AB%8B%E6%80%A7" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>Independent 独立性</h4>
<p>任何故事都是存在于一个更大的系统上下文中的，自然会存在与其它故事的依赖，我们无法完全消除这种依赖，但我们期望能尽可能减少依赖，过于复杂的依赖会对故事的优先级排序、估算、测试造成一系列消极影响。</p>
<p>对于强依赖的故事一般建议的做法是看是否能改变一下故事的拆分逻辑和视角或者将具有强依赖性的几个故事合并为一个大的、独立的故事。</p>
<h4><a id="negotiable%E5%8F%AF%E5%8D%8F%E5%95%86%E5%8F%AF%E8%AE%A8%E8%AE%BA" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>Negotiable 可协商/可讨论</h4>
<p>用户故事本身不是需求本身，更不是合约或承诺，它只是需求的简短描述，梳理故事时如果我们已经掌握一些重要的细节则应该包括在故事的注释内，我们并不需要追求在故事中记录所有需求细节，因为故事的主要目的是提醒客户和团队要围绕它展开相关讨论，而需求的更多细节是在讨论中逐步确定的。</p>
<h4><a id="valuable%E6%9C%89%E4%BB%B7%E5%80%BC" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>Valuable 有价值</h4>
<p>&quot;每个故事必须对用户有价值&quot; 听上去是不是很有道理，但这样理解其实是不全面的，我们需要关注故事可以给用户带来的价值，用户故事一般情况下应该对客户或者用户是具有价值的，保证每个故事都对客户或者用户有价值的最好方法是让客户参与到故事编写的过程来。与此同时我们也应该容忍那些不对用户产生直接价值的故事，很多项目都会包括大量此类故事，比如技术或者架构方面的故事。</p>
<h4><a id="estimable%E5%8F%AF%E4%BC%B0%E7%AE%97" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>Estimable 可估算</h4>
<p>对于开发人员来说，能基于掌握的信息对故事的大小或者工作量进行估算是非常重要的，这对于我们配置资源，制定计划都极其重要，所以故事需要是可以被估算的。如果一个故事无法估算则需要去分析可能原因并加以解决，常见的导致故事无法被估算的原因包括：</p>
<ol>
<li>是否开发人员缺少相关领域知识，是否围绕故事进行了充分的讨论。</li>
<li>是否因为开发人员不具备某项技术，这时候可以先安排一个探针试验，获取到足够可以估算这个故事的知识。</li>
<li>故事过大，这时候需要考虑对故事进行进一步拆分。</li>
</ol>
<h4><a id="small%E8%B6%B3%E5%A4%9F%E5%B0%8F" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>Small 足够小</h4>
<p>在梳理故事过程中会出现各种规模的故事，故事的大小非常重要，过大或过小的故事都会对制定计划造成困扰。因此当故事过大或过小时候我们都需要注意进行相应的调整。</p>
<p>当一个故事过大时候，我们需要尝试将故事拆分为多个大小合理的故事，当一个故事过小时候，我们需要考虑对相关联和类似的故事进行合并。</p>
<p><em>关于如何把故事拆分到合理粒度的方法请阅读 <a href="story-create.md">用户故事拆分</a></em></p>
<h4><a id="testable%E5%8F%AF%E6%B5%8B%E8%AF%95" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>Testable 可测试</h4>
<p>故事必须是可以测试的，如果不能测试开发人员怎么知道他们是否已经完成了代码呢？</p>
<p>在实际实践中经常会听到测试或产品反馈有些故事是不能独立测试，甚至完全不能测试的情况。</p>
<p>造成这种情况的原因通常有如下几个方面：</p>
<ol>
<li>技术性故事\非功能性需求</li>
</ol>
<p>这类需求往往不是与用户需求直接相关的，经常是涉及软件的性能、安全性、稳定性等，对于这类故事的测试首选应该是通过自动化手段进行测试。</p>
<ol start="3">
<li>混淆故事验收测试与集成测试</li>
</ol>
<p>一个故事往往是处于一个大的工作流程或者上下文中的，在很多产品和测试眼中，如果其上下游未完成开发，测试单独故事的价值是有限的，他们更倾向于一个完整的流程完成交付后再进行测试。这是因为他们混淆了两类不同的测试，全流程的测试是集成测试的目标，而对故事的测试是在假设故事涉及的上下游都正确的情况下对其进行的测试。以飞机制造为例，对故事的测试相当于对飞机的各个零件的质量检测，确保每个零件都按其标准被正确制造了。对流程的测试相当于飞机的试飞，检查的是零件组装到一起是否能按预期一样正常工作。</p>
<ol start="3">
<li>故事拆分方式不合理</li>
</ol>
<p>这也是一种常见的造成故事不能独立测试的情况，故事交付依赖很多其它故事的交付，比如 故事拆分时候是按照前端、移动端、服务端的方式进行的，在服务端部署之前，前端和移动端故事根本无法单独测试。</p>
<p>这种情况本质是故事未正确拆分导致的，需要改进故事拆分方式，从业务视角拆分，将故事涉及的前后端工作揉入一个故事内。</p>
<p><em>关于如何把故事拆分到合理粒度的方法请阅读 <a href="story-create.md">用户故事拆分</a></em></p>
<h2><a id="%E4%B8%80%E4%BA%9B%E5%BA%94%E7%94%A8%E6%8A%80%E5%B7%A7" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>一些应用技巧</h2>
<h3><a id="%E8%81%9A%E7%84%A6%E7%9B%AE%E6%A0%87%E7%94%A8%E6%88%B7" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>聚焦目标用户</h3>
<p>在一个大型系统内，往往有许多用户角色，在梳理用户故事时候往往让我们无从下手，如果能聚焦到一个具体的用户角色、甚至一个具体的人上，就会比较容易下手，从一个具体的用户的视角去思考往往可以让思考变得更清晰，故事的可读性也是更强的。我们看一下如下两种写法：</p>
<blockquote>
<p>用户可以登录系统调看当事人的视频档案</p>
<p>负责案件侦破的刑警可以调看自己负责案件的当事人的视频档案</p>
</blockquote>
<p>看到第一种写法会有哪些疑问呢？ 能登录的警察就可以看吗？可以看所有当事人的视频吗？<br />
第二种写法就聚焦到了负责刑事侦破的刑警，并且只能看他负责的案件的当事人的视频。</p>
<h3><a id="%E5%88%87%E8%9B%8B%E7%B3%95%E5%BC%8F%E6%95%85%E4%BA%8B%E6%8B%86%E5%88%86" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>切蛋糕式故事拆分</h3>
<p>对于一个较大的故事我们有很多方法可以将其拆分为较小的多个故事，通常如果开发人员去拆往往喜欢依照技术边界进行拆分：前端、后端、数据服务等，如：</p>
<blockquote>
<p>求职者可以填写自己的简历信息<br />
求职者提交的简历信息后数据存储到云端数据库</p>
</blockquote>
<p>这种情况下往往需要几个故事都完成时候才能提供一个完整功能，产生价值，并且不利于对故事进行独立测试和验证。</p>
<p>理想的故事拆分方式是每个故事都能提供基本完整的功能，Bill Wake将其比喻为 ”切蛋糕“，在编写故事时候像切一块蛋糕一样，每个故事都覆盖蛋糕的每一层。</p>
<h3><a id="%E4%BD%BF%E7%94%A8%E7%BA%A6%E6%9D%9F%E5%8D%A1" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>使用约束卡</h3>
<p>这是一种很有用的实践，在故事开发过程中经常有一些大家都要遵守的约定和要求，比如对性能、稳定性的要求，可以通过设置一系列 特殊的“卡片”来记录和管理。</p>
<p>下面是一些常见约束卡示例：</p>
<blockquote>
<p>系统单个界面响应时间不超过0.5s<br />
系统必须支持不低于100个并非访问<br />
系统需要考虑国际化支持<br />
系统需要同时支持在Linux和Windows运行<br />
...</p>
</blockquote>
<p>约束卡一般不需要单独估算，但是他们会影响一系列故事卡的实现思路和验收标准，其中相当一部分约束会通过自动化测试体系来支持。</p>
<h3><a id="%E7%BC%96%E5%86%99%E5%B0%81%E9%97%AD%E7%9A%84%E6%95%85%E4%BA%8B" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>编写封闭的故事</h3>
<p>封闭性故事的概念来源于Soren Lauesen在他的需求技术汇编中引入的任务闭包性想法，其核心思想是希望用户使用一个故事后能让他觉得完成了某个任务，给用户带来一定的成就感。</p>
<h3><a id="%E5%BB%B6%E8%BF%9F%E8%80%83%E8%99%91%E7%BB%86%E8%8A%82" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>延迟考虑细节</h3>
<p>这是一个非常重要但是非常难做到的要求，我见过的绝大多数敏捷团队都很难做到。很多故事都存在着将需求和方案混在一起的问题，也就是说在梳理故事时候我们会更多的在思考方案而忽略需求的目的。最常见的情况就是界面，很多团队梳理故事是需要有原型才能输出的，他们的故事只是把原型进行了拆解，失去了使用用户故事本来该有的意义。</p>
<h3><a id="%E8%AE%A9%E5%AE%A2%E6%88%B7%E5%8F%82%E4%B8%8E%E7%BC%96%E5%86%99" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>让客户参与编写</h3>
<p>条件允许情况下最好能把客户拉入到梳理用户故事的过程中，用户故事的初衷是让客户或用户通过讲故事的方式告诉团队他的需求和目标。而且客户参与故事梳理也会让客户理解每个故事的，在排列故事优先级、验收故事过程中做到更科学，更有利于让用户融入产品开发过程。</p>
<h2><a id="%E7%94%A8%E6%88%B7%E6%95%85%E4%BA%8B%E7%9A%84%E6%84%8F%E4%B9%89" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>用户故事的意义</h2>
<p>软件需求管理从某种意义上来说是一个沟通问题，要解决的是客户、用户、产品、开发、测试等不同角色之间如何沟通的问题，是对做什么？如何做？如何判断是否成功等一系列问题达成统一认识的过程。</p>
<p>传统管理方式解决这个过程的思路是期望通过详尽的文档+细致的流程来达到目的，其沟通的核心是围绕“文档”，但是基于文档的沟通方式存在着诸多弊端，如：文档编写、评审、维护周期长、变更追踪困难，成本高；容易造成团队面对面沟通意愿和主动性降低，无法保证信息传递效率和质量；文档编写、评审、传递过程变成了责任的传递。</p>
<p>敏捷实践者则希望通过促成更多的 “面对面沟通” 来提高沟通效率和准确性，用户故事就是其中一种最重要的载体。</p>
<p>用户故事可以看做一种边界对象，它是以用户视角通过自然语言描述的，通过促成有意义的交流来对齐业务团队与技术团队对需求的理解，所以，我们通常会把用户故事看做是一种用于建立共识的沟通工具。</p>
<p><img src="http://s.pyrlong.com/ob/20220403211634.png" alt="" /></p>
<p>越来越多的实践表明使用用户故事作为沟通工具可以带来一系列优势：</p>
<ol>
<li>促进用面对面的口头沟通代替基于文档的信息流转，提高沟通效率。</li>
<li>用户故事相比于文档更精炼、更易读、更容易理解。</li>
<li>用户故事的粒度更适合在冲刺粒度内进行计划与跟踪。</li>
<li>用户故事更适合迭代开发，梳理出前一两个冲刺的故事就可以开始冲刺了。</li>
<li>用户故事鼓励细节延迟确认，很多细节可以在开始开发时候再进行讨论和确认。</li>
<li>用户故事鼓励客户、用户、研发团队都参与到功能的设计过程。</li>
<li>促进隐性知识传播，提高团队协作水平。</li>
</ol>
<p>::: tip<br />
需要承认的是目前并没有数据表明使用用户故事会提升团队生产率或者软件成功率。但是从常理上看通过用户视角思考，进行有意义的沟通与记录会对产品成功产生正向影响是毋庸置疑的。<br />
:::</p>
<blockquote>
</blockquote>
<h2><a id="%E9%98%85%E8%AF%BB%E6%9B%B4%E5%A4%9A" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>阅读更多</h2>
<h4><a id="%E7%94%A8%E6%88%B7%E6%95%85%E4%BA%8B%E5%9C%B0%E5%9B%BEstory-mapping-md" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a><a href="story-mapping.md">用户故事地图</a></h4>
<h4><a id="%E7%94%A8%E6%88%B7%E6%95%85%E4%BA%8B%E6%8B%86%E5%88%86story-create-md" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a><a href="story-create.md">用户故事拆分</a></h4>
<h4><a id="%E7%90%86%E8%A7%A3%E6%95%85%E4%BA%8B%E7%82%B9story-point-md" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a><a href="story-point.md">理解故事点</a></h4>
<h4><a id="%E7%94%A8%E6%88%B7%E6%95%85%E4%BA%8B%E5%B8%B8%E7%94%A8%E4%BC%B0%E7%AE%97%E6%96%B9%E6%B3%95story-estimate-md" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a><a href="story-estimate.md">用户故事常用估算方法</a></h4>
<h4><a id="%E7%94%A8%E6%88%B7%E6%97%85%E7%A8%8B%E5%9C%B0%E5%9B%BEuser-journey-md" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a><a href="user-journey.md">用户旅程地图</a></h4>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[理解并使用故事点]]></title>
    <link href="http://www.agileworkshop.cn/16616162861040.html"/>
    <updated>2022-08-28T00:04:46+08:00</updated>
    <id>http://www.agileworkshop.cn/16616162861040.html</id>
    <content type="html"><![CDATA[
<h2><a id="%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%B0%E7%AE%97" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>为什么估算</h2>
<p>在项目执行过程中我们需要不断回答一个问题 ：</p>
<blockquote>
<p><strong>这个需求需要多长时间？什么时候能完成？</strong></p>
</blockquote>
<p>无论一个项目规模多大，采用哪种管理方法，估算与计划对项目管理来说都是必须的，很多重要的决策都依赖于估算的结果。我们希望选择的估算方法最好能具备如下特性：</p>
<ul>
<li>精度适度，成本低，不用为了估算花费过多的精力和成本。</li>
<li>估算结果可以方便用于制作开发计划、发布计划。</li>
<li>估算结果时效性强，可以随着范围、团队能力变化快速更新。</li>
<li>适用于从大到小各个粒度的估算。</li>
<li>估算结果相对稳定，不会随着团队能力的波动有较大的变化。</li>
<li>可以用于评估团队生产率变化趋势。</li>
<li>尽量降低不同能力的人对估算结果的影响。</li>
</ul>
<h2><a id="%E8%AE%A4%E8%AF%86%E6%95%85%E4%BA%8B%E7%82%B9" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>认识故事点</h2>
<p>敏捷中常用的度量规模的方法有两类：相对估算 和 绝对估算，故事点估算是相对估算的一种，其表示一个产品待办列表条目（一般为故事）的工作规模（effort）。它的类似生活中在西餐厅点饮料，我们会说点 中杯 大杯 超大杯，而不会说200ml 500ml，这就是相对的概念，故事点也是一样道理，它反应了一个故事相对于基准故事的大小。</p>
<p><img src="http://s.pyrlong.com/ob/2b22397f3d2ed1afac80a7b70fdf916a.jpg" alt="" /></p>
<blockquote>
<p><strong>故事点的产生背景</strong></p>
<p><strong>极限编程创始人 Ron Jeffries关于故事点的回忆</strong><br />
在XP中，故事最初估算的都是时间：代表完成故事所需花费的时间。我们快速的进行我们称为“理想天”的估算：<em><strong>如果让你一个人独自完成需要多长时间</strong>。</em>，然后将估算得到的理想天乘以一个因子得到实际需要的天数，这个因子我们一般取3，也就是3个实际天完成1个理想天的工作。但是我们在日常工作讨论过程中经常会省略掉“理想”两个字，直接说“天”，结果就是我们的利益相关者经常困惑为什么一天的工作需要三天才能完成，甚至说我们为什么不能用三周完成五十“天”的工作。为避免这种情况我们开始将“理想天”改称为“点”。因此如果估算一个故事为3点，则意味着需要9天来完成该故事。并且我们<strong>只是用故事点来判断需要将多少工作纳入到迭代内</strong>，因此如果我们说这个迭代完成20点也不会有人真的出来反对了。</p>
</blockquote>
<h2><a id="%E5%BD%B1%E5%93%8D%E6%95%85%E4%BA%8B%E7%82%B9%E5%A4%A7%E5%B0%8F%E7%9A%84%E5%9B%A0%E7%B4%A0" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>影响故事点大小的因素</h2>
<p>由于故事点代表开发故事所需的工作规模，因此估算时需要考虑所有可能影响工作规模的所有内容，比如 开发工作量、 复杂性、 任何风险或不确定性带来的影响。在评估故事点时，请务必考虑所有这些因素。</p>
<h3><a id="%E5%B7%A5%E4%BD%9C%E9%87%8F" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>工作量</h3>
<p>如何考虑工作量因素呢？如果有更多事情要做，则需要的工作量应该更大。例如考虑开发两个网页的情况。第一页只有一个字段和要求输入名称的标签，第二页有100个字段，也可以简单地填充一些文本。在实际开发时第二页的开发并不比第一个页更复杂，字段之间没有交互，每个字段只不过是一些普通文本，这两页之间的唯一区别是，第二页有更多的文本标签，需要完成更多是事情，花费更多的工作量。</p>
<h3><a id="%E9%A3%8E%E9%99%A9%E4%B8%8E%E4%B8%8D%E7%A1%AE%E5%AE%9A%E6%80%A7" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>风险与不确定性</h3>
<ol>
<li>产品待办列表条目所包含的风险和不确定性的应影响该条目的故事点估算。</li>
<li>如果团队被要求评估产品待办列表条目，而相关干系人并不清楚需要什么（需求不清），这时候这种不确定性应反映在评估中。</li>
<li>如果为了实现某个功能，而这个功能又涉及更改一些没有自动化测试的旧代码，则这种风险应反映在估算结果中。</li>
</ol>
<h3><a id="%E5%A4%8D%E6%9D%82%E5%BA%A6" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>复杂度</h3>
<p>进行故事点估算时，还应考虑复杂度的因素。<br />
假如开发的网页包含100个普通的文本字段，它们之间没有交互。现在考虑另一个包含100个字段的网页，但是包括如下一些情况：</p>
<ol>
<li>有些是带有日历选择小部件的日期字段。</li>
<li>一些格式化的文本字段，例如电话号码或社会保险号。</li>
<li>包括需要对填入数据的校验和验证的字段，该页面可能还需要字段之间的交互，例如如果用户选择不同条件时需要显示对应的个性化表单，如用户选择信用卡付款，则会显示输入卡号、一个三位数的CVV值，但是，如果用户选择微信支付，则会显示一个付款二维码。</li>
</ol>
<p>这时候即使此时页面仍然是有100个字段，但是它的实现更加复杂。开发它们将花费更多时间，开发人员犯错误的机率也更大，因此必须充分考虑这些因素来进行估算。</p>
<h3><a id="%E6%BB%A1%E8%B6%B3%E5%AE%8C%E6%88%90%E5%AE%9A%E4%B9%89%EF%BC%88dod%EF%BC%89" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>满足完成定义（DoD）</h3>
<p>故事点估算必须包括产品待办事项列表中定义的所有完成定义的约束。例如团队的完成的定义包括创建自动测试以验证故事，则创建这些测试的工作应包括在故事点估算中。</p>
<p><em><strong>实际操作中可以遵照一个原则 ”只有当一个因素影响工作量时才将其纳入进来“</strong></em></p>
<h2><a id="%E6%89%A9%E5%B1%95%E9%98%85%E8%AF%BB" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>扩展阅读</h2>
<p><a href="story-estimate.md">故事点估算</a></p>
<p><a href="scrum-planning-meeting.md">冲刺计划会</a></p>
<p><a href="story-create.md">用户故事拆分</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[测试驱动开发]]></title>
    <link href="http://www.agileworkshop.cn/16616167090862.html"/>
    <updated>2022-08-28T00:11:49+08:00</updated>
    <id>http://www.agileworkshop.cn/16616167090862.html</id>
    <content type="html"><![CDATA[
<h2><a id="%E4%BB%80%E4%B9%88%E6%98%AFtdd" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>什么是TDD</h2>
<p>测试驱动开发是为了践行极限编程中倡导的 ”测试先行“原则而提供实践方法，并且是目前为止用来支撑达到这一目的的最佳实践（Bob大叔的观点）。</p>
<p>其理念类似于工匠砌墙的时候会先拉上一根水平线，砌每一块砖时，都与这跟水平线进行比较，确保每一块砖都保持水平。这已经是常识。而在软件开发过程中，我们不仅没有采用类似的工作方法，有时候甚至会以“工期太紧张”为由忽略测试工作，从而导致了一个恶性循环，越是没有空编写测试，代码的质量越差，花在找 Bug、解决 Bug 的时间也越来越多，产能越来越低，由于产能降低了，时间更紧张、压力更大了，难道，我们不能够将后面浪费的时间花在单元测试上，使得我们的程序一开始就更健壮，更加易于修改吗？</p>
<p>TDD就可以看做是一个为了解决这个问题的实践流程，基于这个流程你可以写出具有极高测试覆盖率（通常接近90%）的代码，同时还可以减少测试中发现比较难以定位的BUG的可能性。</p>
<ol>
<li>当所有的测试都通过的时候，你再也不会担心所写的代码今后会“暗箭伤人”，那种感觉是相当棒的。</li>
<li>当你的客户看到所有的测试都通过的时候，你会对程序充满前所未有的信心。</li>
<li>当你需要进行重构时，测试代码会给你带来更大的勇气，因为你要测试是否重构成功只需要一个按钮。</li>
</ol>
<h2><a id="tdd%E7%9A%84%E4%B8%80%E8%88%AC%E6%B5%81%E7%A8%8B" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>TDD的一般流程</h2>
<p><img src="http://s.pyrlong.com/ob/93efb03a8482b556601c5c99f024dcee.jpg" alt="" /><br />
<strong>TDD的一般过程是：</strong></p>
<ol>
<li>写一个测试</li>
<li>运行这个测试，看到预期的失败</li>
<li>编写尽可能少的业务代码，让测试通过</li>
<li>重构代码</li>
<li>不断重复以上过程</li>
</ol>
<p>TDD也是一个知易行难的实践方法，下面列出了实践TDD的基本原则：</p>
<ol>
<li>
<p>除⾮为了使一个失败的单元测试通过，否则不允许编写任何业务代码</p>
</li>
<li>
<p>在一个单元测试中只允许编写刚好能够导致失败的内容（编译错误也算失败）</p>
</li>
<li>
<p>只允许编写刚好能够使一个失败的单元测试通过的产品代码</p>
</li>
</ol>
<h2><a id="%E5%A6%82%E4%BD%95%E5%BC%80%E5%A7%8B" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>如何开始</h2>
<p>通常来说项目内使用单元测试或者TDD的最主要难点是就是<strong>如何写测试</strong>，测试框架和语法都不是问题，我们可以通过几个例子十几分钟就可以学会，但是如何把脑子里自己对要做的事情的一些模糊的想法转化成可用的测试，甚至是需要在功能实现之前就考虑清楚怎么去验证他们，多数人这时候是不知道如何下手的。</p>
<p>有人告诉你应该使用TDD，但是该如何给一个还没有实现的东西写测试呢？在甚至都还没想明白这个函数要实现什么功能，或者到底是要用一个函数还是两个函数呢，所有我们听说的只是TDD需要换一种软件开发的思维方式，但是应该怎么做呢?</p>
<p>现在我来告诉你如何通过简单五步掌握TDD的一般过程</p>
<h3><a id="%E5%A6%82%E4%BD%95%E5%B0%86%E8%84%91%E4%B8%AD%E7%9A%84%E6%A8%A1%E7%B3%8A%E6%83%B3%E6%B3%95%E8%BD%AC%E5%8C%96%E4%B8%BA%E6%B5%8B%E8%AF%95" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>如何将脑中的模糊想法转化为测试</h3>
<p>让我引导您了解一个可以用来完成此任务的方法，一种将任何你想实现的想法转化成有形的、可测试的用例的方法。我已经使用了很久的测试驱动开发方法，这个方法就是基于我在做TDD的过程中所经历的那种思考的过程。</p>
<p>这个方法与TDD采用的技术细节无关，它更关注经验丰富的TDD开发人员在编码过程中所经历的思考过程，了解这个思考过程可以让TDD的实践变得更容易。</p>
<p>切记：最主要的是要调整你的思维方式，这个过程开始会需要你付出一些有意识的努力，当你付出足够努力的时候，它就会变成你的习惯，编写测试代码将和你写If-else一样平常而必须，你再也不需要为此做额外的努力。</p>
<p><strong>接下来我们以一个例子开始：计算一个密码的强度</strong></p>
<p><em><strong>这个时候我和你一样，只是想到了这个需求，完全还没有头绪，之前也没有写过任何关于这个功能的代码。我现在也处于完全茫然的状态</strong></em></p>
<p>在正式开始之前，再强调一个重要的事儿：我们的目的不是追求完美，测试驱动的开发是一个反复的过程，这意味着您只需执行少量重复步骤（红-绿-重构）,这个过程我们不用过多在意细节，因为本来软件开发就是一个经常变化的过程，TDD让我们做任何改动都更容易，所以我们不用一次追求100%准确，只需要不断重复TDD的过程，我们的软件会自然而然变成它该有的样子。</p>
<p>下面让我们一起开始吧</p>
<h4><a id="%E7%AC%AC%E4%B8%80%E6%AD%A5%EF%BC%9A%E7%A1%AE%E5%AE%9A%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>第一步：确定输入输出</h4>
<p>我们从高层次开始这个过程。我们现在还不在乎如何实现。我们只需要关心我们的原始需求：计算密码强度，为了实现这个需求，我们需要输入一些东西给程序，然后根据输入得到一些输出。通常为了实现这个过程我们会思考着应该定义一个函数，并且会思考一下该函数需要输入哪些数据以及返回什么样的结果。请注意，以上只是我们的思考过程，到目前为止我们还没有写任何代码。</p>
<p>针对这个需求我们需要如何定义呢？</p>
<ol>
<li>
<p>**首先我们需要一个输入：**输入必须是一个密码</p>
</li>
<li>
<p><strong>输出也很简单</strong>：</p>
<p>标识密码强度的一个值，为了简单起见，假设我们的密码强度只是一个标识密码是否是高强度密码的布尔类型。</p>
</li>
</ol>
<h4><a id="%E7%AC%AC%E4%BA%8C%E6%AD%A5%EF%BC%9A%E7%A1%AE%E5%AE%9A%E5%87%BD%E6%95%B0%E7%AD%BE%E5%90%8D" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>第二步：确定函数签名</h4>
<p>针对我们这个例子，很简单-只需输入密码即可。我们可以完全基于该值完成整个计算。那返回值呢？很简单，因为这是一个计算，所以我们可以直接返回结果。现在我们可以决定在代码中调用该函数的方式：</p>
<pre><code class="language-javascript">var strong = isStrongPassword('password string goes here');
</code></pre>
<h4><a id="%E7%AC%AC%E4%B8%89%E6%AD%A5%EF%BC%9A%E9%80%89%E6%8B%A9%E8%A6%81%E5%AE%9E%E7%8E%B0%E5%8A%9F%E8%83%BD%E7%9A%84%E4%B8%80%E4%B8%AA%E5%BE%AE%E5%B0%8F%E7%9A%84%E6%96%B9%E9%9D%A2" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>第三步：选择要实现功能的一个微小的方面</h4>
<p>现在，我们知道了目标，涉及的数据和功能签名。在非TDD工作流程中，可能现在就开始编写该功能的代码了。您可能已经对它的工作方式有了一些想法并且有极大的冲动去编码实现它。这是大多数人在使用TDD时遇到麻烦的地方。关于如何编写函数的所有这些想法会过早引起了您的注意，但是直到开始编写代码之前，我们都不确定如何布置代码。</p>
<p>这时候我们需要考虑的是：我们可以接近目标的最简单的行为是什么？</p>
<p>实际工作中，我们经常会遇到我们尝试解决非常大，例如本例中如果我们考虑密码强度，就会有不同规则的想法，例如特殊字符，数字，密码长度等。</p>
<ol>
<li>
<p>那么，使该功能更接近于验证密码的最终目标，我们能采取的最简单的步骤是什么？</p>
</li>
<li>
<p>如果在没有TDD的情况下构建此函数，那么第一行（或两行）代码将是什么？</p>
</li>
<li>
<p>我们可以添加使功能更接近工作的最少代码量是多少？</p>
</li>
</ol>
<p>在这个例子中密码强度最简单的规则可能是空密码。这真的很容易-密码为空时输出应始终为false。所以我们从这里开始。</p>
<h4><a id="%E7%AC%AC%E5%9B%9B%E6%AD%A5%E5%86%99%E4%B8%80%E4%B8%AA%E6%B5%8B%E8%AF%95" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>第四步 写一个测试</h4>
<p>注意前面的所有步骤实际上与没有TDD的情况下的区别，主要区别在于，我们将重点放在函数的调用方式以及结果上，而不是着眼于实现功能。也就是说–我们正在考虑该功能在某些情况下的行为。就像这样，我们已经可用开始编写测试了：</p>
<p>我们决定该功能将密码作为其唯一参数。我们还决定返回一个布尔值以指示密码是否强壮。</p>
<p>我们还选择了一个空密码，结果应该始终为false –表示一个空密码很弱。</p>
<p>现在我们创建第一个测试：</p>
<pre><code class="language-javascript">describe('isPasswordStrong', function() {  
		it('should give negative result for empty string', function() {
					var password = '';    
					var result = isPasswordStrong(password);    
					expect(result).to.be.false; 
		});
});
</code></pre>
<p>注意，我们很容易地编写了此代码，而无需知道函数中确切的代码行是什么。给定一个空字符串作为参数，结果应为false。一个简单的行为，很容易转化为测试。</p>
<h4><a id="%E7%AC%AC%E4%BA%94%E6%AD%A5%E5%AE%9E%E7%8E%B0%E4%BB%A3%E7%A0%81" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>第五步 实现代码</h4>
<p>我们只会添加使测试通过的最少量的代码。</p>
<pre><code class="language-javascript">function isPasswordStrong(password) { 
		if(!password) {    
				return false;  
	    }
}
</code></pre>
<p>如果我们要继续开发密码强度功能，我们要做的就是重复一次。我们将回到第3步，然后选择下一步。步骤4，添加测试。步骤5，实施。重复。</p>
<p>如果您坚持继续像这样的小步前进，TDD过程就会变得容易得多。可能需要进行针对少量代码的多次测试，但这并不是一件坏事。TDD通过这种方式帮助您减少您可能编写的无用代码量，因为您添加的每一行代码均已通过测试验证。</p>
<h3><a id="%E5%AE%9E%E8%B7%B5%E6%80%BB%E7%BB%93" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>实践总结</h3>
<p>从示例中可以看到，我们可以将相同的五个步骤应用于各种功能。如果您需要练习，可以从我们在此处采用的例子开始，然后查看是否可以采用5个步骤使这些功能完全发挥作用。</p>
<p>一旦掌握了基本知识，测试驱动开发就不会困难。挑战在于，这需要您转变思路：如果没有TDD，您将直接考虑如何实施某些事情。但是在TDD中您会考虑系统的行为是如何表现的 ，应该如何去验证。</p>
<ol>
<li>
<p>函数的输入是什么，调用函数想要的输出（行为）是什么？</p>
</li>
<li>
<p>确定如何从代码中调用函数</p>
</li>
<li>
<p>为您可以想到的某些输入选择最小的行为</p>
</li>
<li>
<p>编写测试，使用这些输入来调用函数并验证行为</p>
</li>
<li>
<p>实施足够的代码以使测试通过</p>
</li>
</ol>
<p>如果我们遵循这些简单的步骤，则提前编写测试变得容易得多。在继续处理代码时，您只需在步骤3至5之间重复即可。</p>
<p>请记住–第一次尝试时就不需要完美，开始就追求完美只会让你过早陷于困境。这也不只是TDD的目的：无论开始做的如何，您可能都需要重做和重构代码的一部分，TDD只是使其更安全，因为您已经进行了一些测试，以验证代码的更改不会导致系统损坏。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[每日站会]]></title>
    <link href="http://www.agileworkshop.cn/16616159828860.html"/>
    <updated>2022-08-27T23:59:42+08:00</updated>
    <id>http://www.agileworkshop.cn/16616159828860.html</id>
    <content type="html"><![CDATA[
<p>站会是Scrum实践中及其关键的一个活动，也是执行最频繁的活动，正确的认识站会的目的和召开方法对提升敏捷效果具有及其重要的意义。</p>
<h2><a id="%E4%BB%80%E4%B9%88%E6%98%AF%E6%AF%8F%E6%97%A5%E7%AB%99%E4%BC%9A" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>什么是每日站会</h2>
<p>“每日站会” 顾名思义 就是大家每天都会站到一起开的一个会议。Scrum指南中定义每日站会是一个15分钟左右时间盒的活动，Scrum指南认为每日站会属于团队自己的会议。Scrum Master 的职责是确保开发团队每日站会按时召开，但是会议结构的定义与组织由开发团队自己负责。</p>
<h2><a id="%E6%AF%8F%E6%97%A5%E7%AB%99%E4%BC%9A%E7%9A%84%E7%9B%AE%E7%9A%84" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>每日站会的目的</h2>
<p>Scrum 站会是开发团队的一个 15 分钟时间盒的事件。站会在冲刺内的每一天都要举行。它的主要目的包括：</p>
<ol>
<li>
<p>检视上次站会以来的工作状态和遇到的障碍，把自己个人工作状态广播出来，让每个人的工作状态透明，促成更多的沟通机会。</p>
</li>
<li>
<p>为接下来的24小时的工作制定计划。</p>
</li>
<li>
<p>借由每日站会跟踪与管理自己的冲刺内故事的开发计划，检视完成冲刺目标的进度和风险，及时发现偏差并进行纠正，提高实现冲刺承诺的可能性。</p>
</li>
<li>
<p>不经常参与站会的PO等角色，也可以通过偶尔参与站会了解团队目前工作状态、进展和风险。</p>
</li>
</ol>
<h2><a id="%E7%AB%99%E4%BC%9A%E6%B5%81%E7%A8%8B" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>站会流程</h2>
<ol>
<li>
<p><strong>主持人准时发起会议。</strong></p>
</li>
<li>
<p><strong>通过燃尽图、看板等给大家同步当前冲刺进度信息。</strong></p>
</li>
<li>
<p><strong>通过物理看板或者JIRA看板提醒大家关注进行中和未开始的故事。</strong></p>
</li>
<li>
<p><strong>每个团队成员用1-2分钟讲述：</strong></p>
<blockquote>
<ol>
<li>
<p>我昨天为了达成冲刺目标完成了什么工作，当前状态怎么样：进行中？已完成？有风险？需要xx配合？</p>
</li>
<li>
<p>为了达成冲刺目标我今天计划做什么，什么时候完成，需要谁配合。</p>
</li>
<li>
<p>我遇到了什么阻碍冲刺目标达成的困难。</p>
</li>
</ol>
</blockquote>
</li>
</ol>
<p><em>第一个问题回答了“我做了什么” ：可以与其他人同步进展。看事情是否在计划上。一旦偏离计划。请主动把它提出以便于相关人员跟进处理。</em></p>
<p><em>第二个问题 回答了 “要做什么” 。是同步你接下来的工作安排。如果涉及到与其他人协作。可以提前协调好时间。</em></p>
<p><em>第三个问题是 “问题和求助”，凸显出需要协助的内容：我遇到困难了，谁可以给我提供一下帮助。</em></p>
<p><em>但是这三件事多数情况下与大多数人无关，所以每个人都需要几句话快速说完，将信息广播出去。团队成员通常会在每日站会后立即聚到一起进行更详细的讨论，或者对冲刺中剩余的工作进行调整或重新计划。</em></p>
<p><strong>5.  每个人说的过程需要同步更新故事和任务状态。</strong></p>
<p><strong>6. 主持人还可以偶尔让团队对当完成当前冲刺进行信心打分：100% or 0%，以发现可能的潜在风险，及时干预。</strong></p>
<p><strong>主持人在会议过程需要完成如下工作：</strong></p>
<ol>
<li>
<p>记录站会提出的需会后讨论或跟进的问题，并记录待办，第二天站会时据此跟进解决进展。</p>
</li>
<li>
<p>如果有物理燃尽图，主持人还要负责更新燃尽图，并及时与团队同步发现的问题。 开发团队可以籍由每日站会来检视完成冲刺目标的进度及趋势，及时发现开发过程中需要移除的障碍。促使团队快速地做出决策。提高开发团队的风险控制能力。</p>
</li>
</ol>
<h2><a id="%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>注意事项</h2>
<ol>
<li>
<p>为了降低会议组织复杂度，会议应该每天在固定的时间固定的地点召开。</p>
</li>
<li>
<p>为了提高大家的参与感。可以让团队成员轮流主持站会，每天站会结束后主持人需要提醒下一次站会的主持人是谁，让他做好准备。</p>
</li>
<li>
<p>站会主持人需要记录站会提出的需讨论或跟进的问题。第二天站会时跟进解决进展。如果有物理燃尽图，主持人还要负责更新燃尽图。</p>
</li>
<li>
<p>为了确保站会效率，站会需要在规定时间准时开始，不因为某个成员未到而推迟。</p>
</li>
<li>
<p>避免站会上讨论细节，涉及细节讨论留到站会后相关成员单独组织讨论。</p>
</li>
<li>
<p>每个人发言时候描述内容要具体，重点关注交付了什么，遇到什么困难。避免流水账。</p>
</li>
<li>
<p>如果有开发团队之外的人出席会议。ScrumMaster 须确保他们不会干扰会议节奏。</p>
</li>
<li>
<p>可以通过制定站会公约并经常强调来约束团队执行站会的纪律，直至团队养成习惯。</p>
</li>
</ol>
<h2><a id="%E6%89%A9%E5%B1%95%E9%98%85%E8%AF%BB" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>扩展阅读</h2>
<p><a href="scrum-role.md">Scrum的3种角色</a></p>
<p><a href="scrum-backlog.md">产品待办列表 Backlog </a></p>
<p><a href="scrum-planning-meeting.md">冲刺计划会</a></p>
<p><a href="scrum-retro.md">冲刺回顾会</a></p>
<p><a href="scrum-retro.md">冲刺评审会</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[最小可行产品（MVP）]]></title>
    <link href="http://www.agileworkshop.cn/16616165456088.html"/>
    <updated>2022-08-28T00:09:05+08:00</updated>
    <id>http://www.agileworkshop.cn/16616165456088.html</id>
    <content type="html"><![CDATA[
<h2><a id="%E6%9C%80%E5%B0%8F%E5%8F%AF%E8%A1%8C%E4%BA%A7%E5%93%81%EF%BC%88mvp%EF%BC%89" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>最小可行产品（MVP）</h2>
<p>Steve Blank是精益创业之父。他提出的MVP（<strong>Minimum Viable Product</strong> 最小可行产品）的概念受到了很多初创企业的青睐。MVP是最符合敏捷思想的产品迭代开发方法。MVP首先着眼于基本的客户需求，快速构建一个可满足客户需要的初步产品原型。部署之后，通过客户反馈，逐步修正产品设计和实现，最终达到完全满足客户需要。而最关键的是，在各个迭代过程中，做出来的产品始终是可为客户所用的产品，而不是只有一部分功能却不能让客户使用。</p>
<p>• MVP是指可以产生预期成果的最小产品发布<br />
• MVP提倡可行产品，是可以独立生存的软件<br />
• MVP是可以产生预期成果的最小产品发布<br />
• 对于存量产品来说，MVP是指可以产生预期成果的最小发布方案<br />
• MVP是为验证假设而做的最小规模的实验</p>
<h2><a id="mvp%E7%9A%84%E9%80%82%E7%94%A8%E8%8C%83%E5%9B%B4" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>MVP的适用范围</h2>
<p>我们经常见到一个软件中包含了千千万万的功能，比如Windows操作系统。对很多用户来说，能用到的功能也就只有寥寥几个，绝大部分功能都在睡大觉，无法真正体现这些功能的价值。软件厂商与其花费大量人力、时间、金钱来做这些绝大多数用户不使用的功能，不如集中精力于用户真正需要的功能，首先从MVP做起，可定制、可选功能集合，不同的用户只需要安装或配置需要的最小功能集合即可。一个软件中有的，都是用户真正需要的。</p>
<p>MVP适用于初创企业在市场不确定的情况下，通过设计实验来快速检验你的产品或方向是否可行。如果你的假设得到了验证，再投入资源大规模进入市场；如果没有通过，那这就是一次快速试错，尽快调整方向。创业企业可以通过做出最小可用产品，精简到不能再精简，发布之后收集市场反应，逐步调整产品战略，调整里程碑，尽快达成短期目标。MVP产品仅包含必要的功能，从而能从早期的用户得到初始的资金和用户反馈。而仅包含必要的功能点意味着最小成本，最能展现核心概念；MVP不一定是成品，也可以仅仅是理念；通常，构建MVP仅需要数天或数周时间。</p>
<h2><a id="mvp%E5%BA%94%E7%94%A8%E6%A1%88%E4%BE%8B" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>MVP应用案例</h2>
<h3><a id="facebook" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>Facebook</h3>
<p>Facebook推出的所有MVP，都是<strong>通过大学或班级把学生联系在一起，然后让他们把信息发布到他们的个人主页上。</strong> 这个想法已经存在于Friends Reunited和其他社交平台上了，<strong>但Facebook方法更简单性，以及它在大学毕业生这个群体中获得的吸引力，证明了它是不可阻挡的。</strong> Facebook几乎所有后来的功能都建立在这种成功的基础上。</p>
<p><img src="http://s.pyrlong.com/ob/20220129172026.png" alt="" /></p>
<h3><a id="groupon" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>Groupon</h3>
<p>优惠券和折扣券是很古老的概念，但<strong>Groupon利用分享和社交化把这个概念带到了新的高度。</strong> 它<strong>推出了一个简单的WordPress网站，并通过电子邮件定期向早期订阅者发送PDF文件。</strong> 这个测试被证明是成功的，然后Groupon建立了它的代金券系统和后端，推动它取得了巨大的成功。</p>
<p><img src="http://s.pyrlong.com/ob/20220129172104.png" alt="" /></p>
<h3><a id="airbnb" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>Airbnb</h3>
<p>减去中间商和提供短期租赁是 Airbnb 的关键目标。 布莱恩 · 切斯基（Brian Chesky）和乔 · 盖比亚（Joe Gebbia）住在旧金山的一个阁楼公寓里，付房租有困难。 于是他们决定尝试一下，来实现自己创业的梦想。当时来到城里参加设计会议的人特别多，周边的酒店都爆满了。为了验证这个想法，他们为那些来到城里参加设计会议的人提供了住宿。 布莱恩和乔 <strong>拍了几张阁楼的照片，创建了一个简单的网页，很快就吸引了了三个付费的客人。</strong> 然后，Airbnb开始了有机扩张。</p>
<p><img src="http://s.pyrlong.com/ob/20220129172145.png" alt="" /></p>
<h3><a id="zynga" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>Zynga</h3>
<p>现在，把游戏和社交媒体放在一起很容易，但曾经这是两个截然不同的流。Zynga最初的产品是<strong>一款几乎任何人都能玩的扑克游戏</strong>。在Facebook上线起到了很大作用，并帮助该团队筹集了风险资本，推动其取得巨大成功。<strong>这证明了有时候你的MVP不是关于产品的，而是它最终的平台。</strong></p>
<h3><a id="pebble" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>Pebble</h3>
<p>智能手表市场正在慢慢获得吸引力，但Pebble证明，<strong>将大量技术元素塞进硬币大小的空间并不是取得成功的先决条件。</strong> 其基于电子纸的原始设计在Kickstarter上筹集了1000万美元，支持者证明这一概念是人们真正想要的。该公司在Pebble Time上表现出了可重复性，2015年，Pebble Time筹集了2000多万美元。是的，Pebble去年退出了市场，<strong>但数百万次的销售证明，并非每个人都需要最快、最新的技术。</strong></p>
<p><img src="http://s.pyrlong.com/ob/20220129172218.png" alt="" /></p>
<h3><a id="%E4%BA%9A%E9%A9%AC%E9%80%8A" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>亚马逊</h3>
<p>亚马逊刚开始在网上销售图书，挑战了这个世界上的Barnes 和 Nobles，它们基本上被困在了实体店的时代。1994年那个<strong>专注于低价格的图书和简单的网页设计</strong>，是公司发展成为零售巨鳄的基础。</p>
<p><img src="http://s.pyrlong.com/ob/20220129172238.png" alt="" /></p>
<h3><a id="zappos" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>Zappos</h3>
<p>如果你不能获得库存来建立网站怎么办？Zappos的创始人尼克·斯温默伦( Nick Swinmurn )在没有库存的情况下从事鞋类零售。** 他拍下了他想在商店里出售的鞋子的照片，如果顾客订购了这些鞋子，他就会亲自购买这些鞋子出售。**在你没有获得产品的时候，这是一个很好的测试市场的方式。</p>
<p><img src="http://s.pyrlong.com/ob/20220129172300.png" alt="" /></p>
<h3><a id="etsy" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>Etsy</h3>
<p>这个专注于手工艺的网站<strong>围绕着eBay做了概念验证，然后找到了一个能够与用户需求共振的MVP。</strong> 此后，随着Etsy专注于小规模定制工艺品及其产品，工艺品销售蓬勃发展。<strong>所有这些都注意到了eBay成功的地方和让卖家失望的地方。</strong></p>
<p><img src="http://s.pyrlong.com/ob/20220129172325.png" alt="" /></p>
<h3><a id="dropbox" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>Dropbox</h3>
<p>Dropbox决定更进一步，但并没有生产任何产品。取而代之的是，他<strong>们通过创建一个解释视频来假装已经准备好了。</strong> 他们想确认他们的文件同步的想法是否对人们来说很有意思。他们本可以构建一个完整的硬件基础设施，开发应用程序等等，但这是他们不愿承担的风险。如果这个想法失败了，Dropbox的创始人阿拉什·费尔多西（Arash Ferdowsi）和德鲁·休斯顿（Drew Houston）将损失宝贵的时间、大量的精力和金钱。一夜之间，他们吸引了7万多人，他们留下了电子邮件，希望尽快获得产品。</p>
<h3><a id="buffer" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>Buffer</h3>
<p>Buffer是一个社交媒体工具，可以帮你打理在Twitter、Facebook、LinkedIn、Pinterest、Google +或Instagram等不同的社交媒体平台上的帖子。刚开始，Buffer的首席执行官乔尔·加斯科因( Joel Gascoigne )决定，他不想打造一款无人使用的产品。所以他们做了一些类似Dropbox做的事情，只是没有视频，他<strong>们创建了一个登陆页面，向访问者展示了Buffer产品的想法，向他们展示不同的价格和功能。如果有人被说服继续购买产品并选择了一个可用的计划——他们会得到一个屏幕通知他们Buffer还没有完全准备好，但他们可以订阅等待列表。</strong> 后来，Buffer使用他们收到的电子邮件与这些人交谈，询问他们的期望等等。这种方法帮助他们生产出了市场真正需要的产品。</p>
<p><img src="http://s.pyrlong.com/ob/20220129172408.png" alt="" /></p>
<h3><a id="twitter" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>Twitter</h3>
<p>Twitter，一个广受欢迎的社交媒体平台，用了一个完全不同的方法。苹果发布iTunes后，播客平台Odeo经历了艰难的时期，<strong>他们不得不组织黑客马拉松来决定下一步该做什么。在其中一次黑客马拉松中，他们想出了一个创建基于SMS的消息平台的想法。</strong> 它最初被称为“twttr”，本来这应该是一款仅供内部使用的产品，但员工很乐意把信息发布到该平台上。这向Odeo的创始人表明，“twttr”的概念可能正是他们想要的。</p>
<p><img src="http://s.pyrlong.com/ob/20220129172434.png" alt="" /></p>
<h3><a id="foursquare" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>Foursquare</h3>
<p>单一功能MVP的一个很好的例子是基于位置的社交平台Foursquare。丹尼斯·克劳利（Dennis Crowley ）和纳文·塞尔瓦杜雷（Naveen Selvadurai）对商界并不陌生。在成立Foursquare之前，他们开发了另一个类似的平台——Dodgeball，最终卖给了谷歌。因此，当他们开始一个新项目时，他们确切地知道他们应该做什么。丹尼斯和纳文开始构建功能有限的MVP。<strong>它允许你在不同的地点登记，并将授予你不同的徽章，作为他们游戏化过程的一部分。只有在MVP成功之后，他们才增加了更多的功能，把它转变成一个复杂的城市指南。</strong></p>
<p><img src="http://s.pyrlong.com/ob/20220129172502.png" alt="" /></p>
<h3><a id="spotify" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>Spotify</h3>
<p>Spotify是另一个很好的例子，说明了如何只实现一个核心功能，而不是让用户被MVP中不同酷功能分散注意力。他们希望构建最佳的音乐流媒体服务，<strong>在他们的MVP中，集中在一个最重要的功能——音乐流。Spotify开发了一个桌面应用程序，并运行了一个封闭的测试版来测试市场。</strong> 虽然MVP产品和免费增值模式正被证明是人们想要的，Spotify团队花时间签约了更多的歌手，同时开发移动应用程序，并前往海外征服美国市场。</p>
<p><img src="http://s.pyrlong.com/ob/20220129172521.png" alt="" /></p>
<h3><a id="uber" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>Uber</h3>
<p>如果你不了解Uber的历史，你可能会感到惊讶。在2010年，Uber并不是你所期望的那样。<strong>Uber的MVP做了一件简单的事情：把司机和旧金山的iPhone用户联系起来，他们并不害怕在一个未知的应用程序中启用信用卡支付。这足以实现他们的主要目标:提供尽可能便宜的出租车服务。</strong> 我们现在所知道的Uber，是正确的业务扩展方法和成功的MVP测试的结果。</p>
<p><img src="http://s.pyrlong.com/ob/20220129172545.png" alt="" /></p>
<h3><a id="iphone" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>iPhone</h3>
<p>看到iPhone出现在这，你不应该惊讶。<strong>当苹果发布第一版iPhone时，它缺乏许多基本功能。</strong> 例如，复制粘贴。我不是在说复制图像或照片，你甚至不能复制文本。接下来，搜索。搜索同事的电子邮件地址应该没那么难吧？把他们的名字放在搜索栏里...等等...没有搜索栏？是的，这对 iPhone 用户来说是一个现实。此外，如果你想发送一封电子邮件，并开始输入你朋友的地址， 你会期待一些建议会弹出来。好吧，你的iPhone里没有。</p>
<p>想给你另一半发送好看的照片？但是你的iPhone不能处理彩信......iPhone 2G也帮不了你。还是没有彩信......好吧，好吧，既然不能发送彩信，那我就用蓝牙耳机听歌吧！什么？没有蓝牙？这个时候，除了iPhone之外，每个智能手机都有蓝牙！</p>
<p>请不要误会，我并不讨厌苹果的产品。我很喜欢它们。我只是想向你展示，<strong>你不必在产品的MVP中构建每个功能。构建核心功能，测试市场是否真的需要它。像苹果这样的巨头都不愿意赌博，你绝对也不应该这样。</strong></p>
<p><img src="http://s.pyrlong.com/ob/20220129172627.png" alt="" /></p>
<h3><a id="angellist" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>AngelList</h3>
<p>AngelList是一个帮助创业公司筹集资金和与投资者建立联系的平台，现在也是一个招聘平台。当巴巴克·尼维（Babak Nivi ）和纳瓦尔·拉维肯特（Naval Ravikant）于2010年1月创建 AngelList 时，<strong>他们通过使用广泛的人脉网络向投资者做简单的电子邮件介绍，来测试他们的服务理念。他们发现解决方案有潜力后，才提出了扩展计划。</strong></p>
<p><img src="http://s.pyrlong.com/ob/20220129172644.png" alt="" /></p>
<h3><a id="product-hunt" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>Product Hunt</h3>
<p>瑞安·胡佛（Ryan Hoover），ProductHunt的创始人，想为那些愿意分享他们的产品并与其他成员讨论的人建立一个社区。但是开发一个功能齐全的Web平台或应用程序需要几周甚至几个月，瑞安甚至不确定人们是否需要它。也许他是唯一一个对建立这样一个社区感兴趣的人。为了测试他的想法，他决定从MVP开始。<strong>瑞安使用了一个名为Linkydink的工具，它允许创建一个群组，以便在成员之间共享链接。然后，他把他的创业朋友都拉了进来，并利用一些公关和社交媒体来宣传他的想法。</strong> 前两周，瑞安的20分钟MVP吸引了超过170人，他们想分享他们的想法或发现的新产品。</p>
<p><img src="http://s.pyrlong.com/ob/20220129172729.png" alt="" /></p>
<h2><a id="%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>注意事项</h2>
<p>MVP并不是适用于任何场景的，MVP模式的问题在于它并不是开发颠覆性技术的最好办法。例如如果乔布斯发布的是最小可用的 iPhone，我们是不是会得出结论说大家更喜欢键盘？如果 Tesla（电动车）制造的是最小可用汽车，还有没有人去开它？因为与 web 服务不同，就好像不可能有人会花几万块买一辆最小可用的车一样，硬件不是免费的，而且不能快速方便更新。当然，这不是＂最小可用＂理念本身的问题，只是有些市场不合适。产品到底可以做到多好或者做到什么程度最好？答案或许永远也找不到。这种模式也不一定就是做大事情的最好方式。有些产品是小调，有的则是交响曲，而有时候你还是要先让音乐演奏起来。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[效能度量]]></title>
    <link href="http://www.agileworkshop.cn/16616164069115.html"/>
    <updated>2022-08-28T00:06:46+08:00</updated>
    <id>http://www.agileworkshop.cn/16616164069115.html</id>
    <content type="html"><![CDATA[
<h2><a id="%E5%BA%A6%E9%87%8F%E7%9A%84%E7%9B%AE%E7%9A%84" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>度量的目的</h2>
<p>近年来“研发效能”一次成为行业热词，出现了很多研发效能专家和研发效能平台。数据驱动的管理、数据驱动决策方法论大行其道，著名管理大师彼得德鲁克在其《管理的实践》的名言：”没有度量就无法管理“ 得到广泛的引用。 度量指标就像是汽车的仪表盘，可以让管理者建立对组织的现状、问题有更客观的认识，更及时发现潜在问题、制定应对策略。</p>
<p>敏捷度量一般是指以<strong>提高研发效能</strong>为目的而建立起来的一套<strong>指标体系</strong>，其目的是用于评估、优化组织研发效能，促进高效、高质的交付业务价值。</p>
<p>研发效能一般指组织或团队交付业务价值的能力，主要关注两个方面：</p>
<ol>
<li><strong>需求的有效性</strong>：开发的功能可以达成预期的业务目标的，这决定了<strong>产出</strong>的规模。</li>
<li><strong>交付的高效性</strong>：团队以最高效的方法完成需求的交付，这决定了<strong>投入</strong>的成本。</li>
</ol>
<blockquote>
<p>研发效能的定义与ROI类似，由 <strong>产出/投入</strong> 的水平决定。</p>
</blockquote>
<p>要提升研发效能就要从这两方面入手：<strong>提高产出</strong>或者<strong>降低投入</strong>，对应的度量体系建立也要从这两方面入手。</p>
<p><img src="http://s.pyrlong.com/ob/20220519155732.png" alt="" /><br />
除了以上两个显性因素之外，还需要关注产品的质量，避免为了追求效率而忽略产品质量，造成浪费。</p>
<h2><a id="%E5%BA%A6%E9%87%8F%E4%BB%80%E4%B9%88" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>度量什么</h2>
<p>在明确了研发效能的定义及影响研发效能的因素之后我们就可以分别去定义度量指标了，一般会利于价值流分析来挖掘这个过程中，下面是一个业务需求从构想到交付的完整生命周期示意图：</p>
<p>在这个过程中我们的度量应优先聚焦于结果性指标，我们各种措施是以提升结果性指标为最终目的的，为了服务这些改进我们可能还需要一些过程性指标作为支撑，以指导日常改进，通过关注这些指标的内在关联性建立全局思维，引导团队持续改进。</p>
<p>但是结果指标一般会存在滞后性，需要依赖过程指标</p>
<h3><a id="%E4%B8%9A%E5%8A%A1%E8%A7%86%E8%A7%92%E6%8C%87%E6%A0%87" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>业务视角指标</h3>
<h4><a id="" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a></h4>
<h3><a id="%E7%A0%94%E5%8F%91%E8%A7%86%E8%A7%92%E6%8C%87%E6%A0%87" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>研发视角指标</h3>
<h3><a id="%E5%9F%BA%E7%A1%80%E8%83%BD%E5%8A%9B%E6%8C%87%E6%A0%87" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>基础能力指标</h3>
<h2><a id="%E5%A6%82%E4%BD%95%E5%BA%A6%E9%87%8F" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>如何度量</h2>
<h2><a id="%E9%9D%A2%E4%B8%B4%E7%9A%84%E6%8C%91%E6%88%98" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>面临的挑战</h2>
<blockquote>
<p>长期以来业界普遍任务目前没有特别有效的方法来度量软件企业的生产力水平</p>
</blockquote>
<p>虽然大家对度量的重要性比较容易达成一致的认识，但是由于软件项目相对于传统产品生产的特殊性，使得很多软件企业缺乏建立有效度量体系的能力，并且随着今年过程分工的越来越细，一个需求的交付需要讲过冗长的过程，在进行度量的时候往往面临着非常多的困难因素。</p>
<h2><a id="%E5%B8%B8%E8%A7%81%E5%8F%8D%E6%A8%A1%E5%BC%8F" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>常见反模式</h2>
<h3><a id="kpiokr%E9%A9%B1%E5%8A%A8%E7%9A%84%E5%BA%A6%E9%87%8F" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>KPI/OKR驱动的度量</h3>
<h3><a id="%E4%B8%8D%E8%AE%A1%E6%88%90%E6%9C%AC%E7%9A%84%E6%95%A3%E5%BC%B9%E6%9E%AA%E5%BC%8F%E5%BA%A6%E9%87%8F" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>不计成本的散弹枪式度量</h3>
<h3><a id="%E7%89%87%E9%9D%A2%E4%BD%BF%E7%94%A8%E5%B1%80%E9%83%A8%E5%8F%8A%E8%BF%87%E7%A8%8B%E6%8C%87%E6%A0%87" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>片面使用局部及过程指标</h3>
<h3><a id="%E5%9B%B4%E7%BB%95%E6%88%90%E7%86%9F%E5%BA%A6%E7%9A%84%E5%BA%A6%E9%87%8F" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>围绕成熟度的度量</h3>
<h3><a id="%E8%BF%87%E5%BA%A6%E5%85%B3%E6%B3%A8%E8%B5%84%E6%BA%90%E5%88%A9%E7%94%A8%E7%8E%87%E8%B5%84%E6%BA%90%E8%B4%9F%E8%8D%B7" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>过度关注资源利用率/资源负荷</h3>
<h3><a id="%E5%B1%80%E9%99%90%E4%BA%8E%E7%AE%80%E5%8D%95%E3%80%81%E6%98%93%E4%BA%8E%E8%8E%B7%E5%8F%96%E7%9A%84%E6%8C%87%E6%A0%87" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>局限于简单、易于获取的指标</h3>
<h3><a id="%E4%BA%BA%E5%B7%A5%E5%B9%B2%E9%A2%84%E6%95%B0%E6%8D%AE" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>人工干预数据</h3>
<h3><a id="%E7%9B%B2%E7%9B%AE%E7%85%A7%E6%90%AC%E6%98%8E%E6%98%9F%E4%BC%81%E4%B8%9A%E7%9A%84%E6%96%B9%E6%A1%88" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>盲目照搬明星企业的方案</h3>
<h3><a id="%E6%8C%87%E6%A0%87%E6%8E%92%E8%A1%8C%E6%A6%9C" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>指标排行榜</h3>
<h3><a id="%E5%BF%BD%E8%A7%86%E7%9B%AE%E6%A0%87%EF%BC%8C%E4%B8%BA%E4%BA%86%E5%BA%A6%E9%87%8F%E8%80%8C%E5%BA%A6%E9%87%8F" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>忽视目标，为了度量而度量</h3>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[故事验收标准]]></title>
    <link href="http://www.agileworkshop.cn/16616161769570.html"/>
    <updated>2022-08-28T00:02:56+08:00</updated>
    <id>http://www.agileworkshop.cn/16616161769570.html</id>
    <content type="html"><![CDATA[
<h2><a id="%E4%BB%80%E4%B9%88%E6%98%AF%E9%AA%8C%E6%94%B6%E6%A0%87%E5%87%86" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>什么是验收标准</h2>
<p>用户故事验收标准，简称AC，从字面看就是用来判断一个故事是否能通过验收的标准。通常情况下它是一个检查清单，是站在用户视角列出的用来判断这个故事是否完成的一系列检查点。</p>
<h2><a id="%E4%B8%BA%E4%BB%80%E4%B9%88%E9%87%8D%E8%A6%81" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>为什么重要</h2>
<p>验收标准在冲刺过程中起到如下作用：</p>
<ol>
<li>在梳理验收标准过程中让团队进行更深度的思考，提前发现需求潜在的变更点和风险点，降低需求遗漏、过程变更的可能性。</li>
<li>让产品和团队在讨论故事时候更有所依据，更利于团队从用户视角出发去思考，避免单纯从实现视角思考。</li>
<li>在故事开发过程中作为研发自测和测试用例输出的指导，帮助确保产品、开发、测试对同一个故事的完成标准的理解达成一致。</li>
<li>利于开发人员进行工作分解，开发自动化验收测试脚本。</li>
</ol>
<h2><a id="%E5%A6%82%E4%BD%95%E6%A2%B3%E7%90%86" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>如何梳理</h2>
<p>故事验收标准梳理是围绕用户故事展开的最优先工作，产品和开发会一起思考与讨论故事完成后该有的样子，最终整理出用于判断故事是否完成的检查项。</p>
<ul>
<li>站在用户视角，从代替用户验收的角度，围绕用户的使用场景进行考虑；</li>
<li>考虑主Happy Path、次Happy Path、Sad Path和Exceptional Path，来梳理出主脉络和AC；</li>
<li>按照Given (在什么样的情景或条件下)/When(做了什么操作, 采取了什么⾏动)/Then(得到了什么结果)的思路来梳理，清楚描述每个功能发生的场景、触发时机和期望结果；</li>
</ul>
<p>用一个发朋友圈的例子来说明思考过程：</p>
<p><img src="http://s.pyrlong.com/ob/20220507141828.png" alt="" /></p>
<p>从上图可以看出对用户来说发朋友圈的正常路径就是 <strong>进入-选择照片（包括填写感想）-发布</strong> 这种类型的操作就是我们常说的Happy Path，它是我们这个功能的主要价值的体现，是用户最可能的操作路径，同时我们还会考虑一种特殊情况，以本例来说，用户也可能发到一半不想发了，这种情况也时有发生，虽然与我们的预期或期望不一致，但是我们也对齐提供支持，这个路径我们称为Sad Path，这两种都是从用户视角去分析很容易识别的。Exceptional Path则主要指那些不是由用户操作触发的、客观环境导致的需要系统去应对或响应的要求，比如断网、存储磁盘满了、没有授权等等。</p>
<h2><a id="%E8%B0%81%E6%9D%A5%E6%A2%B3%E7%90%86" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>谁来梳理</h2>
<p>故事验收标准梳理是整个团队的责任，每个人都有责任区发现和完善，但是产品应该对验收标准负有最终责任，具备最终解释权，并有责任确保验收标准的完整性和准确性。</p>
<h2><a id="%E9%9D%9E%E5%8A%9F%E8%83%BD%E6%80%A7%E8%A6%81%E6%B1%82%E5%A6%82%E4%BD%95%E4%BD%93%E7%8E%B0" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>非功能性要求如何体现</h2>
<p>在开发故事过程中除了从业务和用户视角提出的各种验收标准外，我们还需要满足一系列的非功能性约束，比如性能、稳定性、安全性等，对于这类约束我们需要区分其影响范围，如果只影响个别几个故事，则可以将其写入到验收标准内，如果是对产品大部分故事的约束，则可以以约束条件（约束卡）的形式作为团队DoD的条目存在。</p>
<h2><a id="%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>注意事项</h2>
<ol>
<li>验收标准的梳理是贯穿故事的全生命周期的，任何时候发现新的验收关注点都需要记录进去。</li>
<li>虽然验收标准的梳理是团队的责任，但是产品是第一责任人，实践中往往产品会梳理出第一版验收标准，然后团队其他人进行补充。</li>
<li>故事验收标准要追求尽可能的简短、精确、易懂，体现核心意图。</li>
<li>故事验收标准不能过多，如果你梳理的验收标准有十几甚至几十条，那很可能是你的故事太大了，可以考虑进一步拆分。</li>
<li>尽量从用户视角用业务规则与实例进行说明，尽量不涉及界面实现细节。</li>
<li>故事验收标准和测试用例还是有很大区别的，他可以作为测试用例的输入，但是关注点与测试用例有本质区别，要避免在验收标准中描述一步步的操作细节，甚至直接列举出所有测试场景下的操作过程。</li>
<li>避免使用特定角色才能看懂的术语，验收标准是拉通业务 产品 开发 测试所有角色对故事完成标准认识的工具，所用语言应该是大家都能理解且没有歧义的。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[客户旅程地图]]></title>
    <link href="http://www.agileworkshop.cn/16616166532077.html"/>
    <updated>2022-08-28T00:10:53+08:00</updated>
    <id>http://www.agileworkshop.cn/16616166532077.html</id>
    <content type="html"><![CDATA[
<h2><a id="%E4%BB%80%E4%B9%88%E6%98%AF%E5%AE%A2%E6%88%B7%E6%97%85%E7%A8%8B%E5%9B%BE" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>什么是客户旅程图</h2>
<p>客户旅程图（Customer Journey Mapping，简称CJM），又称User Journey，也被称为用户体验旅程图，它代表了用户可能与正在设计的产品或服务产生接触和交互的场景，它从用户角度出发，以叙述故事的方式描述用户使用产品或接受服务的过程中的主观反应和感受，通过可视化的方式梳理和发掘用户在整个过程中的痛点和满意点，发掘产品或服务的潜在机会点，让产品团队能够从用户体验视角去思考和设计产品。</p>
<h2><a id="%E6%9C%89%E5%93%AA%E4%BA%9B%E4%BD%9C%E7%94%A8" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>有哪些作用</h2>
<p>客户需要的不是某一个产品或功能，而是解决某个问题，产品只是解决问题的工具而已。客户有自己的“目标任务”。只是在某个场景下，客户能借助我们的产品更好地达成这个“目标任务”，而作为产品经理的主要职责就是精准定位到这个目标并提供对应的解决方案，在这个过程中用户旅程图则会更好的帮助产品和团队去理解用户业务流程，定位用户痛点。</p>
<h2><a id="%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>如何创建</h2>
<p><img src="http://s.pyrlong.com/ob/20220507171702.png" alt="" /></p>
<p>一、选定一个或一类客户角色</p>
<p>选择特定客户类型，潜在客户或现有客户，具体取决于设计旅程地图的目的。选择了不同的角色后，就可以使用他们创建客户旅程地图，描述每个角色在与企业的各个接触点的体验。</p>
<p>二、明确要研究的客户角色的用户旅程阶段，包括起点和终点</p>
<p>一旦定义了客户角色，就必须确定客户旅程的各个阶段。从购买产品或服务开始，根据角色定义客户随着时间的推移经历的阶段。定义他们的方式，时间和地点。</p>
<p>三、发现从起点到终点整个客户旅程过程中的重要接触点，绘制用户的行为</p>
<p>从始至终，客户接触点是客户与企业的联系点。例如，客户可以在广告中找到商家，查看评分和评论，访问公司网站，这可能是一个很长的列表，不要创造太多的阶段，要把旅程分成有意义的部分。</p>
<p>四、列出各接触点上的用户体验的情况，超出预期或不符合预期</p>
<p>用户在各接触点可能产生不同的情绪，有些超出预期，有些低于预期，找到低于预期的接触点，也就找到了改进的机会。</p>
<p>五、判断用户体验与企业所提供产品的差异，寻找优化机会</p>
<p>在我们确定了用户体验的痛点之后，我们就可以开始思考，要如何缓解或消除用户旅途中的烦恼了。改进的想法通常是我们产品的功能或服务。</p>
<h2><a id="%E5%BA%94%E7%94%A8%E6%A1%88%E4%BE%8B" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>应用案例</h2>
<p>我们来看一个骑单车到地铁站的案例</p>
<p>1.首先选定角色：骑行者。</p>
<p>2.明确用户旅程阶段：包括寻车-解锁-骑行-停车&amp;关锁四个阶段。</p>
<p>3.寻找重要接触点：包括从寻找车辆、检查车辆、扫码上车、骑行、锁车等一系列接触点。</p>
<p>4.列出用户体验：在整个过程中，从寻车到关锁，产生了担心、焦躁、不满、轻松、担心、开心等情绪体验。</p>
<p>5.寻找机会点：从不符合预期的情绪体验中，找到希望公司附近晚上有单车、希望让二维码更容易扫描、希望让车内物品不易跌落、希望有规划区可以停车四个机会点。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[商业画布]]></title>
    <link href="http://www.agileworkshop.cn/16616165219040.html"/>
    <updated>2022-08-28T00:08:41+08:00</updated>
    <id>http://www.agileworkshop.cn/16616165219040.html</id>
    <content type="html"><![CDATA[
<h2><a id="%E8%A7%A3%E5%86%B3%E7%9A%84%E9%97%AE%E9%A2%98" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>解决的问题</h2>
<p>商业模式描述的是企业创造价值、传递价值、获取价值的方式，它不仅包含了企业的盈利模式，还包含了推广模式、产品模式以及设计思维中的用户模式。一个产品能否成功，核心就在于其是否有清晰的商业模式，其商业模式是否可行。</p>
<p>作为一个产品经理，你会如何思考产品的商业模式呢？如果给投资人或老板介绍产品的商业模式他会关注哪些内容呢？商业画布就是用于思考、呈现这些信息的常用工具之一，它以结构化的思维划分为九大模块，以助于我们更好的去描述、评估和迭代产品的商业模式，也可以帮助我们将复杂的商业模式清晰呈现出来。</p>
<h2><a id="%E8%AE%A4%E8%AF%86%E5%95%86%E4%B8%9A%E7%94%BB%E5%B8%83" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>认识商业画布</h2>
<p>商业画布总体包括9大模块，包括客户细分、价值主张、渠道通路、客户关系、收入来源、核心资源、关键业务、重要合作、成本结构。通过分析这九个模块，产品经理可以勾画出产品完整的商业模式，可以更客观审视自己的商业模式，基于同样的结构也可以更清晰的向老板、投资人说明自己产品的商业模式。</p>
<p>接下来我们一起看一下各个模块的含义及用法。<br />
<img src="http://s.pyrlong.com/ob/e28afc71169d3e566a0c59ee2bc1762.png" alt="" /></p>
<ol>
<li>
<p><strong>客户细分</strong>，简称CS（Customer Segments）：它是商业画布中需要最先确定的内容，是商业模式的核心。你需要反复问自己两个问题：我在为谁创造价值？谁是我们最重要的客户群体？</p>
</li>
<li>
<p><strong>价值主张</strong>，简称VP（Value Propositions）：这部分要回答产品能为核心用户提供的价值、能解决用户的什么问题？它要解决的是，各个用户群体和我们应该建立和保持何种关系？每种关系的建立成本是多少？如何把他们与商业模式的其余部分进行整合？</p>
</li>
<li>
<p><strong>渠道通路</strong> ，简称CH（Channels） ，你的产品或服务用来接触目标用户群体并向他们传递价值主张的渠道。要回答通过哪些渠道可以接触我们的用户细分群体？如何接触他们？渠道如何整合？哪些渠道最成本效益最好？</p>
</li>
<li>
<p><strong>客户关系</strong>，简称CR（Customer Relationships） 它用来描述公司与特定客户细分群体建立的关系类型。这部分你要回答这几个问题：“我们每个客户细分群体希望我们与之建立和保持何种关系？这些关系成本如何？如何把它们与商业模式的其余部分进行整合？”</p>
</li>
<li>
<p><strong>收入来源</strong>，简称RS（Revenue Streams） 产品的盈利方式，是每款产品发展到特定阶段都必须回答的问题。什么样的价值能让客户愿意付费？他们更愿意如何支付费用？每个收入来源占总收入的比例是多少？</p>
</li>
<li>
<p><strong>核心资源</strong>,简称 KR（Key Resoures） 每个商业模式都需要核心资源，这些资源使得企业组织能够创造和提供价值主张、接触市场、与客户细分群体建立关系并赚取收入。它可以是实体资产、金融资产、知识资产或人力资源。这部分必须回答的问题包括：我们的价值主张需要什么样的核心资源？我们的渠道通路需要什么样的核心资源？以及我们的客户关系和收入来源？</p>
</li>
<li>
<p><strong>关键业务</strong>，简称KA（Key Activities） 我们的价值主张、渠道通路需要哪些关键业务？以及我们的客户关系和收入来源？有关键业务才能存活下去。</p>
</li>
<li>
<p><strong>重要合作</strong>,简称KP（Key Partnership） 我们的重要伙伴是谁？谁是我们的重要供应商？我们正在从伙伴哪里获取哪些核心资源？合作伙伴都执行哪些关键业务？</p>
</li>
<li>
<p><strong>成本结构</strong>,简称CS（Cost Structure） 成本结构构造块用来描绘运营一个商业模式所引发的所有成本。你需要知道，自己的商业模式中最重要的固有成本是什么？哪些核心资源以及关键业务花费最多？</p>
</li>
</ol>
<p>至此，一个完整的商业画布就完成了，快去梳理一下你负责的产品的商业模式吧。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[优先级排序]]></title>
    <link href="http://www.agileworkshop.cn/16616163144207.html"/>
    <updated>2022-08-28T00:05:14+08:00</updated>
    <id>http://www.agileworkshop.cn/16616163144207.html</id>
    <content type="html"><![CDATA[
<h2><a id="%E4%BC%98%E5%85%88%E7%BA%A7%E6%8E%92%E5%BA%8F%E5%B7%A5%E5%85%B7" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>优先级排序工具</h2>
<h3><a id="moscow" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>MoSCoW</h3>
<p>想象你得到了一个阿拉丁神灯，灯神让你选择三个愿望来满足，你会选择什么呢？这个选择过程实际就是你对自己的愿望清单排列优先级的过程。在选择哪些故事进入冲刺时也需要同样的思考过程。</p>
<p>MoSCoW优先级排序法就是用来快速完成这个过程的一个常用方法。当您第一次听说莫斯科方法时，它可能会让人联想到圣瓦西里大教堂、克里姆林宫和红场。然而，事实是，莫斯科的方法与俄罗斯根本没有关系！</p>
<p>它是由在甲骨文工作的软件开发人员戴克莱格于 1994 年开发的。MoSCoW 真正代表首字母缩略词，MSCW。添加了元音以使其更容易发音（它听起来也很酷！）。并且MoSCoW 方法很容易解释和理解，任何人都可以在几分钟内掌握。这种简单的特性允许业务、客户、开发人员和任何其他利益相关者都参与并为确定项目的需求优先级做出贡献。</p>
<p>MoSCoW 中的每个字母代表任务优先级的一个层次：<strong>Must</strong>、<strong>Should</strong>、<strong>Could</strong>和<strong>Won't</strong>。通过将故事分类组织到这些类别中，团队可以清楚地了解哪些故事优先级是最高的。<br />
<img src="http://s.pyrlong.com/ob/20220407213505.png" alt="" /><br />
以下是每个类别中的任务类型的细分。</p>
<ul>
<li>
<p><strong>MUST HAVE /必须包括</strong></p>
<p>这个类别代表的是对产品至关重要的功能。是达成产品整体目标的重要组成部分，如果不包括这部分功能就会造成瓶颈，这类故事涵盖了即将放入 sprint backlog 的内容。</p>
</li>
<li>
<p><strong>SHOULD HAVE 应该包括</strong></p>
<p>产品应该要支持的功能，但并不处于最重要部分，稍有延迟并不会造成立即的损失，可以延后一些交付。</p>
</li>
<li>
<p><strong>COULD HAVE 可能包括</strong></p>
<p>辅助性功能，考虑到资源是可用的，这将是一件好事。它们不需要在本次或下一次迭代中发生。可以进入产品积压。</p>
</li>
<li>
<p><strong>WON'T HAVE 不会包括</strong></p>
<p>当前资源条件下不可能包括的功能，这类故事并不涉及基本要求。它们可能不会从产品Backlog中删除，也可能在某种条件下升高优先级，成为交付目标的组成部分，只是目前它们超出了范围或预算。</p>
</li>
</ul>
<p>MoSCoW 方法的最大优势就是从一开始就明确了项目要做什么以及不会做什么。通过该方法可以让所有利益相关者都了解项目的最终目标并达成一致。</p>
<p>上面介绍了MoSCoW方法的含义和用法，但是该方法也存在一定的缺陷：当大量故聚集在MUST HAVE时，往往会失去优先级排序的意义，需要选择另外的方法从大量的MUST HAVE中找出最重要的加以实现。所以我们在使用的时候往往需要结合一些其它方法而不应该单纯依赖这一个方法。</p>
<h3><a id="kano" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>KANO</h3>
<p>东京理科大学质量管理教授 Noriaki Kano 博士于 1984 年创建了 Kano 模型。正如作者 Dave Verduyn解释的那样，Noriaki 博士在研究影响客户满意度和忠诚度的因素时开发了这个框架。该模型确定了五类潜在客户对新功能的反应，从不满意到冷漠，一直到许多人所说的客户喜悦或兴奋功能。Kano 可以帮助团队确定哪些功能可以满足甚至取悦客户; 产品经理经常使用卡诺模型，通过将潜在的新功能分组到对应类别中来确定它们的优先级。</p>
<p>该模型根据不同类型的需求与用户满意度之间的关系分为五类：基本型需求、期望型需求、兴奋型需求、无差异需求、反向型需求。</p>
<p><img src="http://s.pyrlong.com/ob/20220407220002.png" alt="" /></p>
<ul>
<li><strong>基本型需求</strong></li>
</ul>
<p>系统必须提供的功能，没有不行，有了也不会加分的那些功能。</p>
<blockquote>
<p>如手机可以打电话，一个手机可以不支持打电话吗？当然不行，但是一个用户会仅因为手机可以打电话而特别满意吗？当然也不会。</p>
</blockquote>
<ul>
<li><strong>期望型需求</strong></li>
</ul>
<p>基本相当于人们常说的痒点需求，没有这些需求会造成用户满意度降低，如果提供了会提高客户的满意度。这部分需求也是产品经理应该关注的，这也是拉开与竞争对手差距的重要战场。</p>
<blockquote>
<p>如瑞士军刀衍生出的各种各样的额外功能。</p>
</blockquote>
<ul>
<li><strong>兴奋型需求</strong></li>
</ul>
<p>痛点需求，用户可能意想不到但对用户非常重要的需求，如果不提供可能客户也意识不到，但是提供了这类需求可以极大提高用户的满意度。尤其适用于那些用户没有明确想法的场景，产品经理需要深入分析用户行为和期望，打造系统闪光点，给用户产生惊喜，从而提高用户忠诚度。</p>
<ul>
<li><strong>无差异需求</strong></li>
</ul>
<p>用户毫不在意，对用户体验毫无影响的需求。</p>
<ul>
<li><strong>反向型需求</strong></li>
</ul>
<p>用户无此类需求，做了后反而会导致用户满意度下降的需求。</p>
<h3><a id="100%E5%85%83%E6%B5%8B%E8%AF%95" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>100元测试</h3>
<p><img src="http://s.pyrlong.com/ob/20220407220354.png" alt="" /></p>
<p><strong>累积投票法，俗称 100 元测试，是一种简单直接但非常有效的优先排序策略。<strong>它类似于优先级扑克。唯一的区别是</strong>利益相关者在投票中只有固定数量的积分可用。</strong></p>
<blockquote>
<p>给每个利益相关者一张象征性的 100 元钞票，他们通过在该特定功能上花费一定金额来投票。一旦所有的 100 点都用完，投票就会被统计，主持人会根据每个功能的单位找出需要优先考虑的内容。</p>
</blockquote>
<p>该方法是为了确保每个利益相关者都有代表将产生一个公平和平等的评分系统，该系统以产品的最大利益为核心。这一点尤其重要，因为敏捷产品开发有不同的团队在项目上进行协作。</p>

]]></content>
  </entry>
  
</feed>
